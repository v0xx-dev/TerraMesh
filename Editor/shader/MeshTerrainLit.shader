Shader "Shader Graphs/MeshTerrainLit"
{
    Properties
    {
        [NoScaleOffset]_Splatmap_0("Splatmap 0", 2D) = "black" {}
        [NoScaleOffset]_Splatmap_1("Splatmap 1", 2D) = "black" {}
        [NoScaleOffset]_Albedo_0("Albedo 0", 2D) = "black" {}
        [HDR]_Color_Tint_0("Color Tint 0", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_Normals_0("Normals 0", 2D) = "black" {}
        _Normal_Scale_0("Normal Scale 0", Float) = 1
        [NoScaleOffset]_Mask_0("Mask 0", 2D) = "black" {}
        _Metallic_Remapping_0("Metallic Remapping 0", Vector) = (0, 1, 0, 0)
        _AO_Remapping_0("AO Remapping 0", Vector) = (0, 1, 0, 0)
        _Smoothness_Remapping_0("Smoothness Remapping 0", Vector) = (0, 1, 0, 0)
        _Tiling_0("Tiling 0", Vector) = (1, 1, 0, 0)
        _Offset_0("Offset 0", Vector) = (0, 0, 0, 0)
        [NoScaleOffset]_Albedo_1("Albedo (1)", 2D) = "black" {}
        [HDR]_Color_Tint_1("Color Tint (1)", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_Normals_1("Normals (1)", 2D) = "black" {}
        _Normal_Scale_1("Normal Scale (1)", Float) = 1
        [NoScaleOffset]_Mask_1("Mask (1)", 2D) = "black" {}
        _Metallic_Remapping_1("Metallic Remapping (1)", Vector) = (0, 1, 0, 0)
        _AO_Remapping_1("AO Remapping (1)", Vector) = (0, 1, 0, 0)
        _Smoothness_Remapping_1("Smoothness Remapping (1)", Vector) = (0, 1, 0, 0)
        _Tiling_1("Tiling (1)", Vector) = (1, 1, 0, 0)
        _Offset_1("Offset (1)", Vector) = (0, 0, 0, 0)
        [NoScaleOffset]_Albedo_2("Albedo (2)", 2D) = "black" {}
        [HDR]_Color_Tint_2("Color Tint (2)", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_Normals_2("Normals (2)", 2D) = "black" {}
        _Normal_Scale_2("Normal Scale (2)", Float) = 1
        [NoScaleOffset]_Mask_2("Mask (2)", 2D) = "black" {}
        _Metallic_Remapping_2("Metallic Remapping (2)", Vector) = (0, 1, 0, 0)
        _AO_Remapping_2("AO Remapping (2)", Vector) = (0, 1, 0, 0)
        _Smoothness_Remapping_2("Smoothness Remapping (2)", Vector) = (0, 1, 0, 0)
        _Tiling_2("Tiling (2)", Vector) = (1, 1, 0, 0)
        _Offset_2("Offset (2)", Vector) = (0, 0, 0, 0)
        [NoScaleOffset]_Albedo_3("Albedo (3)", 2D) = "black" {}
        [HDR]_Color_Tint_3("Color Tint (3)", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_Normals_3("Normals (3)", 2D) = "black" {}
        _Normal_Scale_3("Normal Scale (3)", Float) = 1
        [NoScaleOffset]_Mask_3("Mask (3)", 2D) = "black" {}
        _Metallic_Remapping_3("Metallic Remapping (3)", Vector) = (0, 1, 0, 0)
        _AO_Remapping_3("AO Remapping (3)", Vector) = (0, 1, 0, 0)
        _Smoothness_Remapping_3("Smoothness Remapping (3)", Vector) = (0, 1, 0, 0)
        _Tiling_3("Tiling (3)", Vector) = (1, 1, 0, 0)
        _Offset_3("Offset (3)", Vector) = (0, 0, 0, 0)
        [NoScaleOffset]_Albedo_4("Albedo (4)", 2D) = "black" {}
        [HDR]_Color_Tint_4("Color Tint (4)", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_Normals_4("Normals (4)", 2D) = "black" {}
        _Normal_Scale_4("Normal Scale (4)", Float) = 1
        [NoScaleOffset]_Mask_4("Mask (4)", 2D) = "black" {}
        _Metallic_Remapping_4("Metallic Remapping (4)", Vector) = (0, 1, 0, 0)
        _AO_Remapping_4("AO Remapping (4)", Vector) = (0, 1, 0, 0)
        _Smoothness_Remapping_4("Smoothness Remapping (4)", Vector) = (0, 1, 0, 0)
        _Tiling_4("Tiling (4)", Vector) = (1, 1, 0, 0)
        _Offset_4("Offset (4)", Vector) = (0, 0, 0, 0)
        [NoScaleOffset]_Albedo_5("Albedo (5)", 2D) = "black" {}
        [HDR]_Color_Tint_5("Color Tint (5)", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_Normals_5("Normals (5)", 2D) = "black" {}
        _Normal_Scale_5("Normal Scale (5)", Float) = 1
        [NoScaleOffset]_Mask_5("Mask (5)", 2D) = "black" {}
        _Metallic_Remapping_5("Metallic Remapping (5)", Vector) = (0, 1, 0, 0)
        _AO_Remapping_5("AO Remapping (5)", Vector) = (0, 1, 0, 0)
        _Smoothness_Remapping_5("Smoothness Remapping (5)", Vector) = (0, 1, 0, 0)
        _Tiling_5("Tiling (5)", Vector) = (1, 1, 0, 0)
        _Offset_5("Offset (5)", Vector) = (0, 0, 0, 0)
        [NoScaleOffset]_Albedo_6("Albedo (6)", 2D) = "black" {}
        [HDR]_Color_Tint_6("Color Tint (6)", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_Normals_6("Normals (6)", 2D) = "black" {}
        _Normal_Scale_6("Normal Scale (6)", Float) = 1
        [NoScaleOffset]_Mask_6("Mask (6)", 2D) = "black" {}
        _Metallic_Remapping_6("Metallic Remapping (6)", Vector) = (0, 1, 0, 0)
        _AO_Remapping_6("AO Remapping (6)", Vector) = (0, 1, 0, 0)
        _Smoothness_Remapping_6("Smoothness Remapping (6)", Vector) = (0, 1, 0, 0)
        _Tiling_6("Tiling (6)", Vector) = (1, 1, 0, 0)
        _Offset_6("Offset (6)", Vector) = (0, 0, 0, 0)
        [NoScaleOffset]_Albedo_7("Albedo (7)", 2D) = "black" {}
        [HDR]_Color_Tint_7("Color Tint (7)", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_Normals_7("Normals (7)", 2D) = "black" {}
        _Normal_Scale_7("Normal Scale (7)", Float) = 1
        [NoScaleOffset]_Mask_7("Mask (7)", 2D) = "black" {}
        _Metallic_Remapping_7("Metallic Remapping (7)", Vector) = (0, 1, 0, 0)
        _AO_Remapping_7("AO Remapping (7)", Vector) = (0, 1, 0, 0)
        _Smoothness_Remapping_7("Smoothness Remapping (7)", Vector) = (0, 1, 0, 0)
        _Tiling_7("Tiling (7)", Vector) = (1, 1, 0, 0)
        _Offset_7("Offset (7)", Vector) = (0, 0, 0, 0)
        [HideInInspector]_EmissionColor("Color", Color) = (1, 1, 1, 1)
        [HideInInspector]_RenderQueueType("Float", Float) = 1
        [HideInInspector][ToggleUI]_AddPrecomputedVelocity("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentWritingMotionVec("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_AlphaCutoffEnable("Boolean", Float) = 0
        [HideInInspector]_TransparentSortPriority("_TransparentSortPriority", Float) = 0
        [HideInInspector][ToggleUI]_UseShadowThreshold("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DoubleSidedEnable("Boolean", Float) = 0
        [HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)]_DoubleSidedNormalMode("Float", Float) = 2
        [HideInInspector]_DoubleSidedConstants("Vector4", Vector) = (1, 1, -1, 0)
        [HideInInspector][Enum(Auto, 0, On, 1, Off, 2)]_DoubleSidedGIMode("Float", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPrepassEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPostpassEnable("Boolean", Float) = 0
        [HideInInspector]_SurfaceType("Float", Float) = 0
        [HideInInspector]_BlendMode("Float", Float) = 0
        [HideInInspector]_SrcBlend("Float", Float) = 1
        [HideInInspector]_DstBlend("Float", Float) = 0
        [HideInInspector]_AlphaSrcBlend("Float", Float) = 1
        [HideInInspector]_AlphaDstBlend("Float", Float) = 0
        [HideInInspector][ToggleUI]_ZWrite("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_TransparentZWrite("Boolean", Float) = 0
        [HideInInspector]_CullMode("Float", Float) = 2
        [HideInInspector][ToggleUI]_EnableFogOnTransparent("Boolean", Float) = 1
        [HideInInspector]_CullModeForward("Float", Float) = 2
        [HideInInspector][Enum(Front, 1, Back, 2)]_TransparentCullMode("Float", Float) = 2
        [HideInInspector][Enum(UnityEditor.Rendering.HighDefinition.OpaqueCullMode)]_OpaqueCullMode("Float", Float) = 2
        [HideInInspector]_ZTestDepthEqualForOpaque("Float", Int) = 3
        [HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)]_ZTestTransparent("Float", Float) = 4
        [HideInInspector][ToggleUI]_TransparentBackfaceEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_RequireSplitLighting("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ReceivesSSR("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ReceivesSSRTransparent("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_EnableBlendModePreserveSpecularLighting("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_SupportDecals("Boolean", Float) = 1
        [HideInInspector]_StencilRef("Float", Int) = 0
        [HideInInspector]_StencilWriteMask("Float", Int) = 6
        [HideInInspector]_StencilRefDepth("Float", Int) = 8
        [HideInInspector]_StencilWriteMaskDepth("Float", Int) = 9
        [HideInInspector]_StencilRefMV("Float", Int) = 40
        [HideInInspector]_StencilWriteMaskMV("Float", Int) = 41
        [HideInInspector]_StencilRefDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskGBuffer("Float", Int) = 15
        [HideInInspector]_StencilRefGBuffer("Float", Int) = 10
        [HideInInspector]_ZTestGBuffer("Float", Int) = 4
        [HideInInspector][ToggleUI]_RayTracing("Boolean", Float) = 0
        [HideInInspector][Enum(None, 0, Planar, 1, Sphere, 2, Thin, 3)]_RefractionModel("Float", Float) = 0
        [HideInInspector][NoScaleOffset]unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="Geometry+225"
            "DisableBatching"="False"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "ShadowCaster"
            Tags
            {
                "LightMode" = "ShadowCaster"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        ColorMask 0
        ZClip [_ZClip]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_SHADOWS
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            // GraphFunctions: <None>
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            surface.Alpha = 1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "META"
            Tags
            {
                "LightMode" = "META"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ EDITOR_VISUALIZATION
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_TEXCOORD3
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_POSITIONPREDISPLACEMENT_WS
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_TEXCOORD3
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD1
            #define FRAG_INPUTS_USE_TEXCOORD2
            #define FRAG_INPUTS_USE_TEXCOORD3
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SCENEPICKINGPASS 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 uv3 : TEXCOORD3;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 positionPredisplacementRWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 texCoord3;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
        };
        struct SurfaceDescriptionInputs
        {
             float3 TangentSpaceNormal;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float4 texCoord0 : INTERP0;
             float4 texCoord1 : INTERP1;
             float4 texCoord2 : INTERP2;
             float4 texCoord3 : INTERP3;
             float3 positionRWS : INTERP4;
             float3 positionPredisplacementRWS : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.texCoord0.xyzw = input.texCoord0;
            output.texCoord1.xyzw = input.texCoord1;
            output.texCoord2.xyzw = input.texCoord2;
            output.texCoord3.xyzw = input.texCoord3;
            output.positionRWS.xyz = input.positionRWS;
            output.positionPredisplacementRWS.xyz = input.positionPredisplacementRWS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.texCoord0 = input.texCoord0.xyzw;
            output.texCoord1 = input.texCoord1.xyzw;
            output.texCoord2 = input.texCoord2.xyzw;
            output.texCoord3 = input.texCoord3.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.positionPredisplacementRWS = input.positionPredisplacementRWS.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Any_float4(float4 In, out float Out)
        {
            Out = any(In);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float
        {
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(UnityTexture2D _Albedo, UnityTexture2D _Normals, UnityTexture2D _Mask, float4 _Color_Tint, float _Normal_Scale, float2 _Metallic_Remapping, float2 _AO_Remapping, float2 _Smoothness_Remapping, float2 _Tiling, float2 _Offset, float _Layer_Weight, UnitySamplerState Sampler, Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float IN, out float4 Base_Color_1, out float3 Normals_2, out float Metallic_3, out float AO_4, out float Smoothness_5)
        {
        float4 _Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4 = _Color_Tint;
        UnityTexture2D _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D = _Albedo;
        float2 _Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2 = IN.AbsoluteWorldSpacePosition.xz;
        float2 _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2 = _Tiling;
        float2 _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2;
        Unity_Divide_float2(_Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2, _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2, _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2);
        float2 _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2 = _Offset;
        float2 _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2;
        Unity_Add_float2(_Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2, _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2, _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2);
        UnitySamplerState _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState = Sampler;
        float4 _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_R_4_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.r;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_G_5_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.g;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_B_6_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.b;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.a;
        float4 _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4, _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4);
        float _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float = _Layer_Weight;
        float4 _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxxx), _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4);
        UnityTexture2D _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D = _Normals;
        float4 _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4);
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_R_4_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.r;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_G_5_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.g;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_B_6_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.b;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_A_7_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.a;
        float _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float = _Normal_Scale;
        float3 _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.xyz), _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float, _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3);
        float3 _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxx), _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3);
        UnityTexture2D _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D = _Mask;
        float4 _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.r;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.g;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_B_6_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.b;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.a;
        float2 _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2 = _Metallic_Remapping;
        float _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float, float2 (0, 1), _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2, _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float);
        float _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        Unity_Multiply_float_float(_Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float);
        float2 _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2 = _AO_Remapping;
        float _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float, float2 (0, 1), _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2, _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float);
        float _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Unity_Multiply_float_float(_Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float);
        float _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean;
        Unity_Any_float4(_SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4, _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean);
        float _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float;
        Unity_Branch_float(_Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean, _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float, _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float);
        float2 _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2 = _Smoothness_Remapping;
        float _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float;
        Unity_Remap_float(_Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float, float2 (0, 1), _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2, _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float);
        float _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        Unity_Multiply_float_float(_Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float);
        Base_Color_1 = _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Normals_2 = _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Metallic_3 = _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        AO_4 = _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Smoothness_5 = _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_0);
            UnityTexture2D _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_0);
            UnityTexture2D _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_0);
            float4 _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_0) : _Color_Tint_0;
            float _Property_056e23a91826476486a6830c67445954_Out_0_Float = _Normal_Scale_0;
            float2 _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2 = _Metallic_Remapping_0;
            float2 _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2 = _AO_Remapping_0;
            float2 _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2 = _Smoothness_Remapping_0;
            float2 _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2 = _Tiling_0;
            float2 _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2 = _Offset_0;
            UnityTexture2D _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_0);
            float4 _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.tex, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.samplerstate, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_R_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.r;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_G_5_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.g;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_B_6_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.b;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_A_7_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.a;
            float _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[0];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[1];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[2];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006;
            _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4;
            float3 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D, _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D, _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D, _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4, _Property_056e23a91826476486a6830c67445954_Out_0_Float, _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2, _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2, _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2, _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2, _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float);
            UnityTexture2D _Property_baad51ce545849088095f56173420144_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_1);
            UnityTexture2D _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_1);
            UnityTexture2D _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_1);
            float4 _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_1) : _Color_Tint_1;
            float _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float = _Normal_Scale_1;
            float2 _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2 = _Metallic_Remapping_1;
            float2 _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2 = _AO_Remapping_1;
            float2 _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2 = _Smoothness_Remapping_1;
            float2 _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2 = _Tiling_1;
            float2 _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2 = _Offset_1;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_513ffd3dead74b5ca5456e2100244bdf;
            _LitLayer_513ffd3dead74b5ca5456e2100244bdf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4;
            float3 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_baad51ce545849088095f56173420144_Out_0_Texture2D, _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D, _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D, _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4, _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float, _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2, _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2, _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2, _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2, _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_513ffd3dead74b5ca5456e2100244bdf, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float);
            float4 _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4);
            UnityTexture2D _Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_2);
            UnityTexture2D _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_2);
            UnityTexture2D _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_2);
            float4 _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_2) : _Color_Tint_2;
            float _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float = _Normal_Scale_2;
            float2 _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2 = _Metallic_Remapping_2;
            float2 _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2 = _AO_Remapping_2;
            float2 _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2 = _Smoothness_Remapping_2;
            float2 _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2 = _Tiling_2;
            float2 _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2 = _Offset_2;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f;
            _LitLayer_1f2c81a1ccd84db58f59135fdd91517f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4;
            float3 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D, _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D, _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D, _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4, _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float, _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2, _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2, _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2, _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2, _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1f2c81a1ccd84db58f59135fdd91517f, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float);
            UnityTexture2D _Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_3);
            UnityTexture2D _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_3);
            UnityTexture2D _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_3);
            float4 _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_3) : _Color_Tint_3;
            float _Property_124a23e85f834643a4862644910febf0_Out_0_Float = _Normal_Scale_3;
            float2 _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2 = _Metallic_Remapping_3;
            float2 _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2 = _AO_Remapping_3;
            float2 _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2 = _Smoothness_Remapping_3;
            float2 _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2 = _Tiling_3;
            float2 _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2 = _Offset_3;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5255baca24fd4912bc05918766c7d91e;
            _LitLayer_5255baca24fd4912bc05918766c7d91e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4;
            float3 _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D, _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D, _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D, _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4, _Property_124a23e85f834643a4862644910febf0_Out_0_Float, _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2, _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2, _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2, _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2, _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5255baca24fd4912bc05918766c7d91e, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float);
            float4 _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4);
            float4 _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4;
            Unity_Add_float4(_Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4, _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4);
            UnityTexture2D _Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_4);
            UnityTexture2D _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_4);
            UnityTexture2D _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_4);
            float4 _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_4) : _Color_Tint_4;
            float _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float = _Normal_Scale_4;
            float2 _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2 = _Metallic_Remapping_4;
            float2 _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2 = _AO_Remapping_4;
            float2 _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2 = _Smoothness_Remapping_4;
            float2 _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2 = _Tiling_4;
            float2 _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2 = _Offset_4;
            UnityTexture2D _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_1);
            float4 _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.tex, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.samplerstate, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_R_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.r;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_G_5_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.g;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_B_6_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.b;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_A_7_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.a;
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[0];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[1];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[2];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_ff97f48270044dceb903e3d916a4bb9b;
            _LitLayer_ff97f48270044dceb903e3d916a4bb9b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4;
            float3 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D, _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D, _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D, _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4, _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float, _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2, _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2, _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2, _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2, _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_ff97f48270044dceb903e3d916a4bb9b, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float);
            UnityTexture2D _Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_5);
            UnityTexture2D _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_5);
            UnityTexture2D _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_5);
            float4 _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_5) : _Color_Tint_5;
            float _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float = _Normal_Scale_5;
            float2 _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2 = _Metallic_Remapping_5;
            float2 _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2 = _AO_Remapping_5;
            float2 _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2 = _Smoothness_Remapping_5;
            float2 _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2 = _Tiling_5;
            float2 _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2 = _Offset_5;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_f897f9464d51426ab77471c3030dc83e;
            _LitLayer_f897f9464d51426ab77471c3030dc83e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4;
            float3 _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D, _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D, _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D, _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4, _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float, _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2, _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2, _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2, _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2, _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_f897f9464d51426ab77471c3030dc83e, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float);
            float4 _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4);
            UnityTexture2D _Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_6);
            UnityTexture2D _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_6);
            UnityTexture2D _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_6);
            float4 _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_6) : _Color_Tint_6;
            float _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float = _Normal_Scale_6;
            float2 _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2 = _Metallic_Remapping_6;
            float2 _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2 = _AO_Remapping_6;
            float2 _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2 = _Smoothness_Remapping_6;
            float2 _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2 = _Tiling_6;
            float2 _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2 = _Offset_6;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1d3814484b5f4ec78dd6ead739661d68;
            _LitLayer_1d3814484b5f4ec78dd6ead739661d68.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4;
            float3 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D, _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D, _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D, _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4, _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float, _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2, _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2, _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2, _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2, _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1d3814484b5f4ec78dd6ead739661d68, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float);
            UnityTexture2D _Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_7);
            UnityTexture2D _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_7);
            UnityTexture2D _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_7);
            float4 _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_7) : _Color_Tint_7;
            float _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float = _Normal_Scale_7;
            float2 _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2 = _Metallic_Remapping_7;
            float2 _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2 = _AO_Remapping_7;
            float2 _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2 = _Smoothness_Remapping_7;
            float2 _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2 = _Tiling_7;
            float2 _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2 = _Offset_7;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5e7d07e7199c46afa246f8f900df65e1;
            _LitLayer_5e7d07e7199c46afa246f8f900df65e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4;
            float3 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D, _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D, _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D, _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4, _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float, _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2, _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2, _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2, _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2, _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5e7d07e7199c46afa246f8f900df65e1, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float);
            float4 _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4);
            float4 _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4;
            Unity_Add_float4(_Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4);
            float4 _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4;
            Unity_Add_float4(_Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4, _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4);
            float _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float);
            float _Add_3995f6f6129448b09302fe5492790629_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float);
            float _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float;
            Unity_Add_float(_Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float, _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float);
            float _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float);
            float _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float);
            float _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float;
            Unity_Add_float(_Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float);
            float _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float;
            Unity_Add_float(_Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float);
            float4 _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4;
            Unity_Divide_float4(_Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxxx), _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4);
            float _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float, _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float);
            float _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float);
            float _Add_1d7868509d274829a85cfe104008340f_Out_2_Float;
            Unity_Add_float(_Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float, _Add_1d7868509d274829a85cfe104008340f_Out_2_Float);
            float _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float, _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float);
            float _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float);
            float _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float;
            Unity_Add_float(_Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float);
            float _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float;
            Unity_Add_float(_Add_1d7868509d274829a85cfe104008340f_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float, _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float);
            float _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            Unity_Divide_float(_Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float);
            float _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float);
            float _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float);
            float _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float;
            Unity_Add_float(_Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float, _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float);
            float _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float);
            float _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float);
            float _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float;
            Unity_Add_float(_Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float);
            float _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float;
            Unity_Add_float(_Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float, _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float);
            float _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            Unity_Divide_float(_Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float);
            float3 _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3);
            float3 _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3);
            float3 _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3;
            Unity_Add_float3(_Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3, _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3);
            float3 _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3);
            float3 _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3);
            float3 _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3;
            Unity_Add_float3(_Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3);
            float3 _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3;
            Unity_Add_float3(_Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3, _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3);
            float3 _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3;
            Unity_Divide_float3(_Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxx), _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3);
            float3 _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            Unity_Normalize_float3(_Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3, _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3);
            float _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float);
            float _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float);
            float _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float;
            Unity_Add_float(_Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float, _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float);
            float _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float);
            float _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float);
            float _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float;
            Unity_Add_float(_Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float);
            float _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float;
            Unity_Add_float(_Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float, _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float);
            float _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            Unity_Divide_float(_Add_7660ed0f30444cdda982202340cff83d_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float);
            surface.BaseColor = (_Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4.xyz);
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            surface.Occlusion = _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            surface.NormalTS = _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            surface.Metallic = _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVertMeshCustomInterpolation' */
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.positionPredisplacementRWS = input.positionPredisplacementRWS;
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.texCoord3 =                  input.texCoord3;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVaryingsToFragInputs' */
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
            normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
            fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassLightTransport.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "ScenePickingPass"
            Tags
            {
                "LightMode" = "Picking"
            }
        
            // Render State
            Cull [_CullMode]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma editor_sync_compilation
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define SCENEPICKINGPASS 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 TangentSpaceNormal;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float4 tangentWS : INTERP0;
             float4 texCoord0 : INTERP1;
             float3 positionRWS : INTERP2;
             float3 normalWS : INTERP3;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.positionRWS.xyz = input.positionRWS;
            output.normalWS.xyz = input.normalWS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Any_float4(float4 In, out float Out)
        {
            Out = any(In);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float
        {
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(UnityTexture2D _Albedo, UnityTexture2D _Normals, UnityTexture2D _Mask, float4 _Color_Tint, float _Normal_Scale, float2 _Metallic_Remapping, float2 _AO_Remapping, float2 _Smoothness_Remapping, float2 _Tiling, float2 _Offset, float _Layer_Weight, UnitySamplerState Sampler, Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float IN, out float4 Base_Color_1, out float3 Normals_2, out float Metallic_3, out float AO_4, out float Smoothness_5)
        {
        float4 _Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4 = _Color_Tint;
        UnityTexture2D _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D = _Albedo;
        float2 _Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2 = IN.AbsoluteWorldSpacePosition.xz;
        float2 _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2 = _Tiling;
        float2 _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2;
        Unity_Divide_float2(_Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2, _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2, _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2);
        float2 _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2 = _Offset;
        float2 _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2;
        Unity_Add_float2(_Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2, _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2, _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2);
        UnitySamplerState _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState = Sampler;
        float4 _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_R_4_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.r;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_G_5_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.g;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_B_6_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.b;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.a;
        float4 _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4, _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4);
        float _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float = _Layer_Weight;
        float4 _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxxx), _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4);
        UnityTexture2D _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D = _Normals;
        float4 _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4);
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_R_4_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.r;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_G_5_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.g;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_B_6_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.b;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_A_7_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.a;
        float _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float = _Normal_Scale;
        float3 _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.xyz), _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float, _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3);
        float3 _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxx), _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3);
        UnityTexture2D _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D = _Mask;
        float4 _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.r;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.g;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_B_6_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.b;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.a;
        float2 _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2 = _Metallic_Remapping;
        float _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float, float2 (0, 1), _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2, _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float);
        float _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        Unity_Multiply_float_float(_Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float);
        float2 _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2 = _AO_Remapping;
        float _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float, float2 (0, 1), _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2, _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float);
        float _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Unity_Multiply_float_float(_Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float);
        float _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean;
        Unity_Any_float4(_SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4, _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean);
        float _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float;
        Unity_Branch_float(_Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean, _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float, _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float);
        float2 _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2 = _Smoothness_Remapping;
        float _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float;
        Unity_Remap_float(_Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float, float2 (0, 1), _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2, _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float);
        float _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        Unity_Multiply_float_float(_Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float);
        Base_Color_1 = _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Normals_2 = _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Metallic_3 = _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        AO_4 = _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Smoothness_5 = _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_0);
            UnityTexture2D _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_0);
            UnityTexture2D _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_0);
            float4 _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_0) : _Color_Tint_0;
            float _Property_056e23a91826476486a6830c67445954_Out_0_Float = _Normal_Scale_0;
            float2 _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2 = _Metallic_Remapping_0;
            float2 _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2 = _AO_Remapping_0;
            float2 _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2 = _Smoothness_Remapping_0;
            float2 _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2 = _Tiling_0;
            float2 _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2 = _Offset_0;
            UnityTexture2D _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_0);
            float4 _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.tex, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.samplerstate, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_R_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.r;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_G_5_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.g;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_B_6_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.b;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_A_7_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.a;
            float _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[0];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[1];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[2];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006;
            _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4;
            float3 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D, _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D, _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D, _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4, _Property_056e23a91826476486a6830c67445954_Out_0_Float, _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2, _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2, _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2, _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2, _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float);
            UnityTexture2D _Property_baad51ce545849088095f56173420144_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_1);
            UnityTexture2D _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_1);
            UnityTexture2D _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_1);
            float4 _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_1) : _Color_Tint_1;
            float _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float = _Normal_Scale_1;
            float2 _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2 = _Metallic_Remapping_1;
            float2 _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2 = _AO_Remapping_1;
            float2 _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2 = _Smoothness_Remapping_1;
            float2 _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2 = _Tiling_1;
            float2 _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2 = _Offset_1;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_513ffd3dead74b5ca5456e2100244bdf;
            _LitLayer_513ffd3dead74b5ca5456e2100244bdf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4;
            float3 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_baad51ce545849088095f56173420144_Out_0_Texture2D, _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D, _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D, _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4, _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float, _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2, _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2, _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2, _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2, _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_513ffd3dead74b5ca5456e2100244bdf, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float);
            float4 _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4);
            UnityTexture2D _Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_2);
            UnityTexture2D _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_2);
            UnityTexture2D _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_2);
            float4 _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_2) : _Color_Tint_2;
            float _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float = _Normal_Scale_2;
            float2 _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2 = _Metallic_Remapping_2;
            float2 _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2 = _AO_Remapping_2;
            float2 _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2 = _Smoothness_Remapping_2;
            float2 _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2 = _Tiling_2;
            float2 _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2 = _Offset_2;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f;
            _LitLayer_1f2c81a1ccd84db58f59135fdd91517f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4;
            float3 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D, _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D, _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D, _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4, _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float, _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2, _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2, _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2, _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2, _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1f2c81a1ccd84db58f59135fdd91517f, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float);
            UnityTexture2D _Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_3);
            UnityTexture2D _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_3);
            UnityTexture2D _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_3);
            float4 _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_3) : _Color_Tint_3;
            float _Property_124a23e85f834643a4862644910febf0_Out_0_Float = _Normal_Scale_3;
            float2 _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2 = _Metallic_Remapping_3;
            float2 _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2 = _AO_Remapping_3;
            float2 _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2 = _Smoothness_Remapping_3;
            float2 _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2 = _Tiling_3;
            float2 _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2 = _Offset_3;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5255baca24fd4912bc05918766c7d91e;
            _LitLayer_5255baca24fd4912bc05918766c7d91e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4;
            float3 _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D, _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D, _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D, _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4, _Property_124a23e85f834643a4862644910febf0_Out_0_Float, _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2, _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2, _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2, _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2, _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5255baca24fd4912bc05918766c7d91e, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float);
            float4 _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4);
            float4 _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4;
            Unity_Add_float4(_Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4, _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4);
            UnityTexture2D _Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_4);
            UnityTexture2D _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_4);
            UnityTexture2D _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_4);
            float4 _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_4) : _Color_Tint_4;
            float _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float = _Normal_Scale_4;
            float2 _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2 = _Metallic_Remapping_4;
            float2 _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2 = _AO_Remapping_4;
            float2 _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2 = _Smoothness_Remapping_4;
            float2 _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2 = _Tiling_4;
            float2 _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2 = _Offset_4;
            UnityTexture2D _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_1);
            float4 _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.tex, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.samplerstate, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_R_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.r;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_G_5_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.g;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_B_6_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.b;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_A_7_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.a;
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[0];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[1];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[2];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_ff97f48270044dceb903e3d916a4bb9b;
            _LitLayer_ff97f48270044dceb903e3d916a4bb9b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4;
            float3 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D, _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D, _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D, _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4, _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float, _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2, _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2, _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2, _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2, _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_ff97f48270044dceb903e3d916a4bb9b, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float);
            UnityTexture2D _Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_5);
            UnityTexture2D _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_5);
            UnityTexture2D _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_5);
            float4 _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_5) : _Color_Tint_5;
            float _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float = _Normal_Scale_5;
            float2 _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2 = _Metallic_Remapping_5;
            float2 _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2 = _AO_Remapping_5;
            float2 _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2 = _Smoothness_Remapping_5;
            float2 _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2 = _Tiling_5;
            float2 _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2 = _Offset_5;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_f897f9464d51426ab77471c3030dc83e;
            _LitLayer_f897f9464d51426ab77471c3030dc83e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4;
            float3 _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D, _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D, _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D, _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4, _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float, _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2, _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2, _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2, _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2, _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_f897f9464d51426ab77471c3030dc83e, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float);
            float4 _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4);
            UnityTexture2D _Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_6);
            UnityTexture2D _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_6);
            UnityTexture2D _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_6);
            float4 _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_6) : _Color_Tint_6;
            float _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float = _Normal_Scale_6;
            float2 _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2 = _Metallic_Remapping_6;
            float2 _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2 = _AO_Remapping_6;
            float2 _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2 = _Smoothness_Remapping_6;
            float2 _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2 = _Tiling_6;
            float2 _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2 = _Offset_6;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1d3814484b5f4ec78dd6ead739661d68;
            _LitLayer_1d3814484b5f4ec78dd6ead739661d68.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4;
            float3 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D, _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D, _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D, _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4, _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float, _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2, _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2, _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2, _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2, _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1d3814484b5f4ec78dd6ead739661d68, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float);
            UnityTexture2D _Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_7);
            UnityTexture2D _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_7);
            UnityTexture2D _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_7);
            float4 _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_7) : _Color_Tint_7;
            float _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float = _Normal_Scale_7;
            float2 _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2 = _Metallic_Remapping_7;
            float2 _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2 = _AO_Remapping_7;
            float2 _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2 = _Smoothness_Remapping_7;
            float2 _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2 = _Tiling_7;
            float2 _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2 = _Offset_7;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5e7d07e7199c46afa246f8f900df65e1;
            _LitLayer_5e7d07e7199c46afa246f8f900df65e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4;
            float3 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D, _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D, _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D, _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4, _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float, _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2, _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2, _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2, _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2, _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5e7d07e7199c46afa246f8f900df65e1, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float);
            float4 _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4);
            float4 _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4;
            Unity_Add_float4(_Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4);
            float4 _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4;
            Unity_Add_float4(_Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4, _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4);
            float _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float);
            float _Add_3995f6f6129448b09302fe5492790629_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float);
            float _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float;
            Unity_Add_float(_Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float, _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float);
            float _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float);
            float _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float);
            float _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float;
            Unity_Add_float(_Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float);
            float _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float;
            Unity_Add_float(_Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float);
            float4 _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4;
            Unity_Divide_float4(_Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxxx), _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4);
            float _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float, _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float);
            float _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float);
            float _Add_1d7868509d274829a85cfe104008340f_Out_2_Float;
            Unity_Add_float(_Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float, _Add_1d7868509d274829a85cfe104008340f_Out_2_Float);
            float _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float, _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float);
            float _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float);
            float _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float;
            Unity_Add_float(_Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float);
            float _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float;
            Unity_Add_float(_Add_1d7868509d274829a85cfe104008340f_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float, _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float);
            float _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            Unity_Divide_float(_Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float);
            float _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float);
            float _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float);
            float _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float;
            Unity_Add_float(_Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float, _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float);
            float _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float);
            float _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float);
            float _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float;
            Unity_Add_float(_Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float);
            float _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float;
            Unity_Add_float(_Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float, _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float);
            float _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            Unity_Divide_float(_Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float);
            float3 _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3);
            float3 _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3);
            float3 _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3;
            Unity_Add_float3(_Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3, _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3);
            float3 _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3);
            float3 _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3);
            float3 _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3;
            Unity_Add_float3(_Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3);
            float3 _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3;
            Unity_Add_float3(_Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3, _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3);
            float3 _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3;
            Unity_Divide_float3(_Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxx), _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3);
            float3 _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            Unity_Normalize_float3(_Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3, _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3);
            float _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float);
            float _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float);
            float _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float;
            Unity_Add_float(_Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float, _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float);
            float _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float);
            float _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float);
            float _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float;
            Unity_Add_float(_Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float);
            float _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float;
            Unity_Add_float(_Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float, _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float);
            float _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            Unity_Divide_float(_Add_7660ed0f30444cdda982202340cff83d_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float);
            surface.BaseColor = (_Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4.xyz);
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            surface.Occlusion = _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            surface.NormalTS = _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            surface.Metallic = _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
            normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
            fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "SceneSelectionPass"
            Tags
            {
                "LightMode" = "SceneSelectionPass"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma editor_sync_compilation
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TEXCOORD0
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SCENESELECTIONPASS 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float4 texCoord0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 TangentSpaceNormal;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float4 texCoord0 : INTERP0;
             float3 positionRWS : INTERP1;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.texCoord0.xyzw = input.texCoord0;
            output.positionRWS.xyz = input.positionRWS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Any_float4(float4 In, out float Out)
        {
            Out = any(In);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float
        {
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(UnityTexture2D _Albedo, UnityTexture2D _Normals, UnityTexture2D _Mask, float4 _Color_Tint, float _Normal_Scale, float2 _Metallic_Remapping, float2 _AO_Remapping, float2 _Smoothness_Remapping, float2 _Tiling, float2 _Offset, float _Layer_Weight, UnitySamplerState Sampler, Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float IN, out float4 Base_Color_1, out float3 Normals_2, out float Metallic_3, out float AO_4, out float Smoothness_5)
        {
        float4 _Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4 = _Color_Tint;
        UnityTexture2D _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D = _Albedo;
        float2 _Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2 = IN.AbsoluteWorldSpacePosition.xz;
        float2 _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2 = _Tiling;
        float2 _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2;
        Unity_Divide_float2(_Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2, _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2, _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2);
        float2 _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2 = _Offset;
        float2 _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2;
        Unity_Add_float2(_Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2, _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2, _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2);
        UnitySamplerState _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState = Sampler;
        float4 _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_R_4_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.r;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_G_5_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.g;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_B_6_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.b;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.a;
        float4 _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4, _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4);
        float _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float = _Layer_Weight;
        float4 _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxxx), _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4);
        UnityTexture2D _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D = _Normals;
        float4 _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4);
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_R_4_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.r;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_G_5_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.g;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_B_6_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.b;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_A_7_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.a;
        float _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float = _Normal_Scale;
        float3 _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.xyz), _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float, _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3);
        float3 _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxx), _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3);
        UnityTexture2D _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D = _Mask;
        float4 _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.r;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.g;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_B_6_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.b;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.a;
        float2 _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2 = _Metallic_Remapping;
        float _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float, float2 (0, 1), _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2, _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float);
        float _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        Unity_Multiply_float_float(_Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float);
        float2 _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2 = _AO_Remapping;
        float _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float, float2 (0, 1), _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2, _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float);
        float _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Unity_Multiply_float_float(_Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float);
        float _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean;
        Unity_Any_float4(_SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4, _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean);
        float _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float;
        Unity_Branch_float(_Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean, _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float, _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float);
        float2 _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2 = _Smoothness_Remapping;
        float _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float;
        Unity_Remap_float(_Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float, float2 (0, 1), _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2, _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float);
        float _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        Unity_Multiply_float_float(_Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float);
        Base_Color_1 = _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Normals_2 = _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Metallic_3 = _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        AO_4 = _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Smoothness_5 = _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_0);
            UnityTexture2D _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_0);
            UnityTexture2D _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_0);
            float4 _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_0) : _Color_Tint_0;
            float _Property_056e23a91826476486a6830c67445954_Out_0_Float = _Normal_Scale_0;
            float2 _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2 = _Metallic_Remapping_0;
            float2 _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2 = _AO_Remapping_0;
            float2 _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2 = _Smoothness_Remapping_0;
            float2 _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2 = _Tiling_0;
            float2 _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2 = _Offset_0;
            UnityTexture2D _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_0);
            float4 _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.tex, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.samplerstate, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_R_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.r;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_G_5_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.g;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_B_6_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.b;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_A_7_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.a;
            float _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[0];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[1];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[2];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006;
            _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4;
            float3 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D, _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D, _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D, _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4, _Property_056e23a91826476486a6830c67445954_Out_0_Float, _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2, _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2, _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2, _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2, _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float);
            UnityTexture2D _Property_baad51ce545849088095f56173420144_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_1);
            UnityTexture2D _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_1);
            UnityTexture2D _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_1);
            float4 _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_1) : _Color_Tint_1;
            float _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float = _Normal_Scale_1;
            float2 _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2 = _Metallic_Remapping_1;
            float2 _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2 = _AO_Remapping_1;
            float2 _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2 = _Smoothness_Remapping_1;
            float2 _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2 = _Tiling_1;
            float2 _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2 = _Offset_1;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_513ffd3dead74b5ca5456e2100244bdf;
            _LitLayer_513ffd3dead74b5ca5456e2100244bdf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4;
            float3 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_baad51ce545849088095f56173420144_Out_0_Texture2D, _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D, _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D, _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4, _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float, _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2, _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2, _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2, _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2, _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_513ffd3dead74b5ca5456e2100244bdf, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float);
            float4 _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4);
            UnityTexture2D _Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_2);
            UnityTexture2D _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_2);
            UnityTexture2D _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_2);
            float4 _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_2) : _Color_Tint_2;
            float _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float = _Normal_Scale_2;
            float2 _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2 = _Metallic_Remapping_2;
            float2 _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2 = _AO_Remapping_2;
            float2 _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2 = _Smoothness_Remapping_2;
            float2 _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2 = _Tiling_2;
            float2 _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2 = _Offset_2;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f;
            _LitLayer_1f2c81a1ccd84db58f59135fdd91517f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4;
            float3 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D, _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D, _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D, _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4, _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float, _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2, _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2, _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2, _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2, _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1f2c81a1ccd84db58f59135fdd91517f, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float);
            UnityTexture2D _Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_3);
            UnityTexture2D _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_3);
            UnityTexture2D _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_3);
            float4 _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_3) : _Color_Tint_3;
            float _Property_124a23e85f834643a4862644910febf0_Out_0_Float = _Normal_Scale_3;
            float2 _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2 = _Metallic_Remapping_3;
            float2 _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2 = _AO_Remapping_3;
            float2 _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2 = _Smoothness_Remapping_3;
            float2 _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2 = _Tiling_3;
            float2 _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2 = _Offset_3;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5255baca24fd4912bc05918766c7d91e;
            _LitLayer_5255baca24fd4912bc05918766c7d91e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4;
            float3 _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D, _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D, _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D, _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4, _Property_124a23e85f834643a4862644910febf0_Out_0_Float, _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2, _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2, _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2, _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2, _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5255baca24fd4912bc05918766c7d91e, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float);
            float4 _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4);
            float4 _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4;
            Unity_Add_float4(_Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4, _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4);
            UnityTexture2D _Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_4);
            UnityTexture2D _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_4);
            UnityTexture2D _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_4);
            float4 _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_4) : _Color_Tint_4;
            float _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float = _Normal_Scale_4;
            float2 _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2 = _Metallic_Remapping_4;
            float2 _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2 = _AO_Remapping_4;
            float2 _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2 = _Smoothness_Remapping_4;
            float2 _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2 = _Tiling_4;
            float2 _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2 = _Offset_4;
            UnityTexture2D _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_1);
            float4 _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.tex, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.samplerstate, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_R_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.r;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_G_5_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.g;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_B_6_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.b;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_A_7_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.a;
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[0];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[1];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[2];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_ff97f48270044dceb903e3d916a4bb9b;
            _LitLayer_ff97f48270044dceb903e3d916a4bb9b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4;
            float3 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D, _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D, _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D, _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4, _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float, _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2, _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2, _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2, _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2, _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_ff97f48270044dceb903e3d916a4bb9b, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float);
            UnityTexture2D _Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_5);
            UnityTexture2D _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_5);
            UnityTexture2D _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_5);
            float4 _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_5) : _Color_Tint_5;
            float _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float = _Normal_Scale_5;
            float2 _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2 = _Metallic_Remapping_5;
            float2 _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2 = _AO_Remapping_5;
            float2 _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2 = _Smoothness_Remapping_5;
            float2 _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2 = _Tiling_5;
            float2 _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2 = _Offset_5;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_f897f9464d51426ab77471c3030dc83e;
            _LitLayer_f897f9464d51426ab77471c3030dc83e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4;
            float3 _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D, _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D, _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D, _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4, _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float, _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2, _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2, _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2, _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2, _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_f897f9464d51426ab77471c3030dc83e, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float);
            float4 _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4);
            UnityTexture2D _Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_6);
            UnityTexture2D _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_6);
            UnityTexture2D _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_6);
            float4 _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_6) : _Color_Tint_6;
            float _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float = _Normal_Scale_6;
            float2 _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2 = _Metallic_Remapping_6;
            float2 _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2 = _AO_Remapping_6;
            float2 _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2 = _Smoothness_Remapping_6;
            float2 _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2 = _Tiling_6;
            float2 _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2 = _Offset_6;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1d3814484b5f4ec78dd6ead739661d68;
            _LitLayer_1d3814484b5f4ec78dd6ead739661d68.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4;
            float3 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D, _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D, _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D, _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4, _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float, _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2, _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2, _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2, _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2, _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1d3814484b5f4ec78dd6ead739661d68, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float);
            UnityTexture2D _Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_7);
            UnityTexture2D _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_7);
            UnityTexture2D _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_7);
            float4 _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_7) : _Color_Tint_7;
            float _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float = _Normal_Scale_7;
            float2 _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2 = _Metallic_Remapping_7;
            float2 _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2 = _AO_Remapping_7;
            float2 _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2 = _Smoothness_Remapping_7;
            float2 _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2 = _Tiling_7;
            float2 _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2 = _Offset_7;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5e7d07e7199c46afa246f8f900df65e1;
            _LitLayer_5e7d07e7199c46afa246f8f900df65e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4;
            float3 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D, _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D, _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D, _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4, _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float, _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2, _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2, _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2, _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2, _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5e7d07e7199c46afa246f8f900df65e1, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float);
            float4 _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4);
            float4 _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4;
            Unity_Add_float4(_Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4);
            float4 _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4;
            Unity_Add_float4(_Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4, _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4);
            float _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float);
            float _Add_3995f6f6129448b09302fe5492790629_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float);
            float _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float;
            Unity_Add_float(_Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float, _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float);
            float _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float);
            float _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float);
            float _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float;
            Unity_Add_float(_Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float);
            float _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float;
            Unity_Add_float(_Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float);
            float4 _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4;
            Unity_Divide_float4(_Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxxx), _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4);
            float _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float, _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float);
            float _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float);
            float _Add_1d7868509d274829a85cfe104008340f_Out_2_Float;
            Unity_Add_float(_Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float, _Add_1d7868509d274829a85cfe104008340f_Out_2_Float);
            float _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float, _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float);
            float _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float);
            float _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float;
            Unity_Add_float(_Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float);
            float _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float;
            Unity_Add_float(_Add_1d7868509d274829a85cfe104008340f_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float, _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float);
            float _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            Unity_Divide_float(_Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float);
            float _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float);
            float _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float);
            float _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float;
            Unity_Add_float(_Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float, _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float);
            float _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float);
            float _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float);
            float _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float;
            Unity_Add_float(_Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float);
            float _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float;
            Unity_Add_float(_Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float, _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float);
            float _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            Unity_Divide_float(_Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float);
            float3 _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3);
            float3 _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3);
            float3 _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3;
            Unity_Add_float3(_Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3, _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3);
            float3 _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3);
            float3 _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3);
            float3 _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3;
            Unity_Add_float3(_Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3);
            float3 _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3;
            Unity_Add_float3(_Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3, _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3);
            float3 _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3;
            Unity_Divide_float3(_Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxx), _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3);
            float3 _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            Unity_Normalize_float3(_Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3, _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3);
            float _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float);
            float _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float);
            float _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float;
            Unity_Add_float(_Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float, _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float);
            float _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float);
            float _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float);
            float _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float;
            Unity_Add_float(_Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float);
            float _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float;
            Unity_Add_float(_Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float, _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float);
            float _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            Unity_Divide_float(_Add_7660ed0f30444cdda982202340cff83d_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float);
            surface.BaseColor = (_Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4.xyz);
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            surface.Occlusion = _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            surface.NormalTS = _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            surface.Metallic = _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.texCoord0 =                  input.texCoord0;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
            normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
            fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "MotionVectors"
            Tags
            {
                "LightMode" = "MotionVectors"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskMV]
        Ref [_StencilRefMV]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ WRITE_DECAL_BUFFER
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_MOTION_VECTORS
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 TangentSpaceNormal;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float4 tangentWS : INTERP0;
             float4 texCoord0 : INTERP1;
             float3 positionRWS : INTERP2;
             float3 normalWS : INTERP3;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.positionRWS.xyz = input.positionRWS;
            output.normalWS.xyz = input.normalWS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Any_float4(float4 In, out float Out)
        {
            Out = any(In);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float
        {
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(UnityTexture2D _Albedo, UnityTexture2D _Normals, UnityTexture2D _Mask, float4 _Color_Tint, float _Normal_Scale, float2 _Metallic_Remapping, float2 _AO_Remapping, float2 _Smoothness_Remapping, float2 _Tiling, float2 _Offset, float _Layer_Weight, UnitySamplerState Sampler, Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float IN, out float4 Base_Color_1, out float3 Normals_2, out float Metallic_3, out float AO_4, out float Smoothness_5)
        {
        float4 _Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4 = _Color_Tint;
        UnityTexture2D _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D = _Albedo;
        float2 _Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2 = IN.AbsoluteWorldSpacePosition.xz;
        float2 _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2 = _Tiling;
        float2 _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2;
        Unity_Divide_float2(_Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2, _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2, _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2);
        float2 _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2 = _Offset;
        float2 _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2;
        Unity_Add_float2(_Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2, _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2, _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2);
        UnitySamplerState _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState = Sampler;
        float4 _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_R_4_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.r;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_G_5_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.g;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_B_6_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.b;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.a;
        float4 _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4, _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4);
        float _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float = _Layer_Weight;
        float4 _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxxx), _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4);
        UnityTexture2D _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D = _Normals;
        float4 _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4);
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_R_4_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.r;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_G_5_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.g;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_B_6_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.b;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_A_7_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.a;
        float _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float = _Normal_Scale;
        float3 _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.xyz), _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float, _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3);
        float3 _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxx), _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3);
        UnityTexture2D _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D = _Mask;
        float4 _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.r;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.g;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_B_6_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.b;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.a;
        float2 _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2 = _Metallic_Remapping;
        float _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float, float2 (0, 1), _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2, _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float);
        float _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        Unity_Multiply_float_float(_Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float);
        float2 _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2 = _AO_Remapping;
        float _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float, float2 (0, 1), _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2, _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float);
        float _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Unity_Multiply_float_float(_Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float);
        float _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean;
        Unity_Any_float4(_SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4, _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean);
        float _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float;
        Unity_Branch_float(_Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean, _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float, _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float);
        float2 _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2 = _Smoothness_Remapping;
        float _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float;
        Unity_Remap_float(_Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float, float2 (0, 1), _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2, _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float);
        float _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        Unity_Multiply_float_float(_Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float);
        Base_Color_1 = _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Normals_2 = _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Metallic_3 = _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        AO_4 = _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Smoothness_5 = _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_0);
            UnityTexture2D _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_0);
            UnityTexture2D _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_0);
            float4 _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_0) : _Color_Tint_0;
            float _Property_056e23a91826476486a6830c67445954_Out_0_Float = _Normal_Scale_0;
            float2 _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2 = _Metallic_Remapping_0;
            float2 _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2 = _AO_Remapping_0;
            float2 _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2 = _Smoothness_Remapping_0;
            float2 _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2 = _Tiling_0;
            float2 _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2 = _Offset_0;
            UnityTexture2D _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_0);
            float4 _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.tex, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.samplerstate, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_R_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.r;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_G_5_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.g;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_B_6_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.b;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_A_7_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.a;
            float _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[0];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[1];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[2];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006;
            _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4;
            float3 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D, _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D, _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D, _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4, _Property_056e23a91826476486a6830c67445954_Out_0_Float, _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2, _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2, _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2, _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2, _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float);
            UnityTexture2D _Property_baad51ce545849088095f56173420144_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_1);
            UnityTexture2D _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_1);
            UnityTexture2D _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_1);
            float4 _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_1) : _Color_Tint_1;
            float _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float = _Normal_Scale_1;
            float2 _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2 = _Metallic_Remapping_1;
            float2 _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2 = _AO_Remapping_1;
            float2 _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2 = _Smoothness_Remapping_1;
            float2 _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2 = _Tiling_1;
            float2 _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2 = _Offset_1;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_513ffd3dead74b5ca5456e2100244bdf;
            _LitLayer_513ffd3dead74b5ca5456e2100244bdf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4;
            float3 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_baad51ce545849088095f56173420144_Out_0_Texture2D, _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D, _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D, _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4, _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float, _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2, _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2, _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2, _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2, _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_513ffd3dead74b5ca5456e2100244bdf, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float);
            float4 _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4);
            UnityTexture2D _Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_2);
            UnityTexture2D _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_2);
            UnityTexture2D _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_2);
            float4 _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_2) : _Color_Tint_2;
            float _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float = _Normal_Scale_2;
            float2 _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2 = _Metallic_Remapping_2;
            float2 _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2 = _AO_Remapping_2;
            float2 _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2 = _Smoothness_Remapping_2;
            float2 _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2 = _Tiling_2;
            float2 _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2 = _Offset_2;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f;
            _LitLayer_1f2c81a1ccd84db58f59135fdd91517f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4;
            float3 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D, _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D, _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D, _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4, _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float, _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2, _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2, _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2, _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2, _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1f2c81a1ccd84db58f59135fdd91517f, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float);
            UnityTexture2D _Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_3);
            UnityTexture2D _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_3);
            UnityTexture2D _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_3);
            float4 _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_3) : _Color_Tint_3;
            float _Property_124a23e85f834643a4862644910febf0_Out_0_Float = _Normal_Scale_3;
            float2 _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2 = _Metallic_Remapping_3;
            float2 _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2 = _AO_Remapping_3;
            float2 _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2 = _Smoothness_Remapping_3;
            float2 _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2 = _Tiling_3;
            float2 _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2 = _Offset_3;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5255baca24fd4912bc05918766c7d91e;
            _LitLayer_5255baca24fd4912bc05918766c7d91e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4;
            float3 _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D, _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D, _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D, _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4, _Property_124a23e85f834643a4862644910febf0_Out_0_Float, _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2, _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2, _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2, _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2, _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5255baca24fd4912bc05918766c7d91e, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float);
            float4 _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4);
            float4 _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4;
            Unity_Add_float4(_Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4, _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4);
            UnityTexture2D _Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_4);
            UnityTexture2D _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_4);
            UnityTexture2D _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_4);
            float4 _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_4) : _Color_Tint_4;
            float _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float = _Normal_Scale_4;
            float2 _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2 = _Metallic_Remapping_4;
            float2 _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2 = _AO_Remapping_4;
            float2 _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2 = _Smoothness_Remapping_4;
            float2 _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2 = _Tiling_4;
            float2 _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2 = _Offset_4;
            UnityTexture2D _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_1);
            float4 _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.tex, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.samplerstate, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_R_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.r;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_G_5_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.g;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_B_6_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.b;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_A_7_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.a;
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[0];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[1];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[2];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_ff97f48270044dceb903e3d916a4bb9b;
            _LitLayer_ff97f48270044dceb903e3d916a4bb9b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4;
            float3 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D, _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D, _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D, _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4, _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float, _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2, _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2, _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2, _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2, _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_ff97f48270044dceb903e3d916a4bb9b, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float);
            UnityTexture2D _Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_5);
            UnityTexture2D _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_5);
            UnityTexture2D _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_5);
            float4 _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_5) : _Color_Tint_5;
            float _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float = _Normal_Scale_5;
            float2 _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2 = _Metallic_Remapping_5;
            float2 _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2 = _AO_Remapping_5;
            float2 _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2 = _Smoothness_Remapping_5;
            float2 _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2 = _Tiling_5;
            float2 _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2 = _Offset_5;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_f897f9464d51426ab77471c3030dc83e;
            _LitLayer_f897f9464d51426ab77471c3030dc83e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4;
            float3 _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D, _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D, _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D, _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4, _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float, _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2, _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2, _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2, _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2, _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_f897f9464d51426ab77471c3030dc83e, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float);
            float4 _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4);
            UnityTexture2D _Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_6);
            UnityTexture2D _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_6);
            UnityTexture2D _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_6);
            float4 _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_6) : _Color_Tint_6;
            float _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float = _Normal_Scale_6;
            float2 _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2 = _Metallic_Remapping_6;
            float2 _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2 = _AO_Remapping_6;
            float2 _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2 = _Smoothness_Remapping_6;
            float2 _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2 = _Tiling_6;
            float2 _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2 = _Offset_6;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1d3814484b5f4ec78dd6ead739661d68;
            _LitLayer_1d3814484b5f4ec78dd6ead739661d68.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4;
            float3 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D, _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D, _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D, _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4, _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float, _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2, _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2, _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2, _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2, _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1d3814484b5f4ec78dd6ead739661d68, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float);
            UnityTexture2D _Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_7);
            UnityTexture2D _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_7);
            UnityTexture2D _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_7);
            float4 _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_7) : _Color_Tint_7;
            float _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float = _Normal_Scale_7;
            float2 _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2 = _Metallic_Remapping_7;
            float2 _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2 = _AO_Remapping_7;
            float2 _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2 = _Smoothness_Remapping_7;
            float2 _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2 = _Tiling_7;
            float2 _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2 = _Offset_7;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5e7d07e7199c46afa246f8f900df65e1;
            _LitLayer_5e7d07e7199c46afa246f8f900df65e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4;
            float3 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D, _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D, _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D, _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4, _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float, _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2, _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2, _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2, _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2, _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5e7d07e7199c46afa246f8f900df65e1, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float);
            float4 _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4);
            float4 _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4;
            Unity_Add_float4(_Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4);
            float4 _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4;
            Unity_Add_float4(_Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4, _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4);
            float _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float);
            float _Add_3995f6f6129448b09302fe5492790629_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float);
            float _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float;
            Unity_Add_float(_Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float, _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float);
            float _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float);
            float _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float);
            float _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float;
            Unity_Add_float(_Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float);
            float _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float;
            Unity_Add_float(_Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float);
            float4 _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4;
            Unity_Divide_float4(_Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxxx), _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4);
            float _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float, _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float);
            float _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float);
            float _Add_1d7868509d274829a85cfe104008340f_Out_2_Float;
            Unity_Add_float(_Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float, _Add_1d7868509d274829a85cfe104008340f_Out_2_Float);
            float _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float, _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float);
            float _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float);
            float _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float;
            Unity_Add_float(_Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float);
            float _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float;
            Unity_Add_float(_Add_1d7868509d274829a85cfe104008340f_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float, _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float);
            float _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            Unity_Divide_float(_Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float);
            float _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float);
            float _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float);
            float _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float;
            Unity_Add_float(_Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float, _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float);
            float _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float);
            float _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float);
            float _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float;
            Unity_Add_float(_Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float);
            float _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float;
            Unity_Add_float(_Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float, _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float);
            float _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            Unity_Divide_float(_Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float);
            float3 _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3);
            float3 _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3);
            float3 _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3;
            Unity_Add_float3(_Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3, _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3);
            float3 _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3);
            float3 _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3);
            float3 _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3;
            Unity_Add_float3(_Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3);
            float3 _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3;
            Unity_Add_float3(_Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3, _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3);
            float3 _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3;
            Unity_Divide_float3(_Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxx), _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3);
            float3 _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            Unity_Normalize_float3(_Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3, _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3);
            float _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float);
            float _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float);
            float _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float;
            Unity_Add_float(_Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float, _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float);
            float _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float);
            float _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float);
            float _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float;
            Unity_Add_float(_Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float);
            float _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float;
            Unity_Add_float(_Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float, _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float);
            float _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            Unity_Divide_float(_Add_7660ed0f30444cdda982202340cff83d_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float);
            surface.BaseColor = (_Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4.xyz);
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            surface.Occlusion = _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            surface.NormalTS = _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            surface.Metallic = _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
            normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
            fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassMotionVectors.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "TransparentDepthPrepass"
            Tags
            {
                "LightMode" = "TransparentDepthPrepass"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One Zero
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_TRANSPARENT_DEPTH_PREPASS
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 TangentSpaceNormal;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float4 tangentWS : INTERP0;
             float4 texCoord0 : INTERP1;
             float3 positionRWS : INTERP2;
             float3 normalWS : INTERP3;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.positionRWS.xyz = input.positionRWS;
            output.normalWS.xyz = input.normalWS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Any_float4(float4 In, out float Out)
        {
            Out = any(In);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float
        {
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(UnityTexture2D _Albedo, UnityTexture2D _Normals, UnityTexture2D _Mask, float4 _Color_Tint, float _Normal_Scale, float2 _Metallic_Remapping, float2 _AO_Remapping, float2 _Smoothness_Remapping, float2 _Tiling, float2 _Offset, float _Layer_Weight, UnitySamplerState Sampler, Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float IN, out float4 Base_Color_1, out float3 Normals_2, out float Metallic_3, out float AO_4, out float Smoothness_5)
        {
        float4 _Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4 = _Color_Tint;
        UnityTexture2D _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D = _Albedo;
        float2 _Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2 = IN.AbsoluteWorldSpacePosition.xz;
        float2 _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2 = _Tiling;
        float2 _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2;
        Unity_Divide_float2(_Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2, _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2, _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2);
        float2 _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2 = _Offset;
        float2 _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2;
        Unity_Add_float2(_Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2, _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2, _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2);
        UnitySamplerState _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState = Sampler;
        float4 _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_R_4_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.r;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_G_5_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.g;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_B_6_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.b;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.a;
        float4 _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4, _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4);
        float _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float = _Layer_Weight;
        float4 _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxxx), _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4);
        UnityTexture2D _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D = _Normals;
        float4 _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4);
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_R_4_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.r;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_G_5_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.g;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_B_6_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.b;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_A_7_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.a;
        float _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float = _Normal_Scale;
        float3 _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.xyz), _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float, _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3);
        float3 _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxx), _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3);
        UnityTexture2D _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D = _Mask;
        float4 _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.r;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.g;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_B_6_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.b;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.a;
        float2 _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2 = _Metallic_Remapping;
        float _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float, float2 (0, 1), _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2, _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float);
        float _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        Unity_Multiply_float_float(_Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float);
        float2 _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2 = _AO_Remapping;
        float _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float, float2 (0, 1), _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2, _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float);
        float _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Unity_Multiply_float_float(_Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float);
        float _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean;
        Unity_Any_float4(_SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4, _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean);
        float _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float;
        Unity_Branch_float(_Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean, _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float, _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float);
        float2 _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2 = _Smoothness_Remapping;
        float _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float;
        Unity_Remap_float(_Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float, float2 (0, 1), _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2, _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float);
        float _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        Unity_Multiply_float_float(_Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float);
        Base_Color_1 = _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Normals_2 = _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Metallic_3 = _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        AO_4 = _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Smoothness_5 = _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
            float3 NormalTS;
            float Smoothness;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_0);
            UnityTexture2D _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_0);
            UnityTexture2D _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_0);
            float4 _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_0) : _Color_Tint_0;
            float _Property_056e23a91826476486a6830c67445954_Out_0_Float = _Normal_Scale_0;
            float2 _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2 = _Metallic_Remapping_0;
            float2 _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2 = _AO_Remapping_0;
            float2 _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2 = _Smoothness_Remapping_0;
            float2 _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2 = _Tiling_0;
            float2 _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2 = _Offset_0;
            UnityTexture2D _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_0);
            float4 _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.tex, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.samplerstate, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_R_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.r;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_G_5_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.g;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_B_6_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.b;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_A_7_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.a;
            float _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[0];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[1];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[2];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006;
            _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4;
            float3 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D, _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D, _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D, _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4, _Property_056e23a91826476486a6830c67445954_Out_0_Float, _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2, _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2, _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2, _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2, _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float);
            UnityTexture2D _Property_baad51ce545849088095f56173420144_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_1);
            UnityTexture2D _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_1);
            UnityTexture2D _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_1);
            float4 _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_1) : _Color_Tint_1;
            float _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float = _Normal_Scale_1;
            float2 _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2 = _Metallic_Remapping_1;
            float2 _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2 = _AO_Remapping_1;
            float2 _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2 = _Smoothness_Remapping_1;
            float2 _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2 = _Tiling_1;
            float2 _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2 = _Offset_1;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_513ffd3dead74b5ca5456e2100244bdf;
            _LitLayer_513ffd3dead74b5ca5456e2100244bdf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4;
            float3 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_baad51ce545849088095f56173420144_Out_0_Texture2D, _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D, _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D, _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4, _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float, _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2, _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2, _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2, _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2, _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_513ffd3dead74b5ca5456e2100244bdf, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float);
            float3 _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3);
            UnityTexture2D _Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_2);
            UnityTexture2D _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_2);
            UnityTexture2D _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_2);
            float4 _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_2) : _Color_Tint_2;
            float _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float = _Normal_Scale_2;
            float2 _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2 = _Metallic_Remapping_2;
            float2 _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2 = _AO_Remapping_2;
            float2 _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2 = _Smoothness_Remapping_2;
            float2 _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2 = _Tiling_2;
            float2 _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2 = _Offset_2;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f;
            _LitLayer_1f2c81a1ccd84db58f59135fdd91517f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4;
            float3 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D, _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D, _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D, _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4, _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float, _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2, _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2, _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2, _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2, _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1f2c81a1ccd84db58f59135fdd91517f, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float);
            UnityTexture2D _Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_3);
            UnityTexture2D _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_3);
            UnityTexture2D _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_3);
            float4 _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_3) : _Color_Tint_3;
            float _Property_124a23e85f834643a4862644910febf0_Out_0_Float = _Normal_Scale_3;
            float2 _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2 = _Metallic_Remapping_3;
            float2 _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2 = _AO_Remapping_3;
            float2 _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2 = _Smoothness_Remapping_3;
            float2 _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2 = _Tiling_3;
            float2 _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2 = _Offset_3;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5255baca24fd4912bc05918766c7d91e;
            _LitLayer_5255baca24fd4912bc05918766c7d91e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4;
            float3 _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D, _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D, _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D, _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4, _Property_124a23e85f834643a4862644910febf0_Out_0_Float, _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2, _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2, _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2, _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2, _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5255baca24fd4912bc05918766c7d91e, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float);
            float3 _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3);
            float3 _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3;
            Unity_Add_float3(_Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3, _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3);
            UnityTexture2D _Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_4);
            UnityTexture2D _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_4);
            UnityTexture2D _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_4);
            float4 _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_4) : _Color_Tint_4;
            float _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float = _Normal_Scale_4;
            float2 _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2 = _Metallic_Remapping_4;
            float2 _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2 = _AO_Remapping_4;
            float2 _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2 = _Smoothness_Remapping_4;
            float2 _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2 = _Tiling_4;
            float2 _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2 = _Offset_4;
            UnityTexture2D _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_1);
            float4 _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.tex, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.samplerstate, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_R_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.r;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_G_5_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.g;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_B_6_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.b;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_A_7_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.a;
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[0];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[1];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[2];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_ff97f48270044dceb903e3d916a4bb9b;
            _LitLayer_ff97f48270044dceb903e3d916a4bb9b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4;
            float3 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D, _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D, _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D, _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4, _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float, _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2, _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2, _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2, _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2, _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_ff97f48270044dceb903e3d916a4bb9b, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float);
            UnityTexture2D _Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_5);
            UnityTexture2D _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_5);
            UnityTexture2D _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_5);
            float4 _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_5) : _Color_Tint_5;
            float _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float = _Normal_Scale_5;
            float2 _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2 = _Metallic_Remapping_5;
            float2 _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2 = _AO_Remapping_5;
            float2 _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2 = _Smoothness_Remapping_5;
            float2 _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2 = _Tiling_5;
            float2 _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2 = _Offset_5;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_f897f9464d51426ab77471c3030dc83e;
            _LitLayer_f897f9464d51426ab77471c3030dc83e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4;
            float3 _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D, _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D, _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D, _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4, _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float, _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2, _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2, _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2, _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2, _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_f897f9464d51426ab77471c3030dc83e, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float);
            float3 _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3);
            UnityTexture2D _Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_6);
            UnityTexture2D _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_6);
            UnityTexture2D _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_6);
            float4 _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_6) : _Color_Tint_6;
            float _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float = _Normal_Scale_6;
            float2 _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2 = _Metallic_Remapping_6;
            float2 _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2 = _AO_Remapping_6;
            float2 _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2 = _Smoothness_Remapping_6;
            float2 _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2 = _Tiling_6;
            float2 _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2 = _Offset_6;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1d3814484b5f4ec78dd6ead739661d68;
            _LitLayer_1d3814484b5f4ec78dd6ead739661d68.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4;
            float3 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D, _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D, _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D, _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4, _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float, _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2, _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2, _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2, _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2, _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1d3814484b5f4ec78dd6ead739661d68, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float);
            UnityTexture2D _Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_7);
            UnityTexture2D _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_7);
            UnityTexture2D _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_7);
            float4 _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_7) : _Color_Tint_7;
            float _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float = _Normal_Scale_7;
            float2 _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2 = _Metallic_Remapping_7;
            float2 _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2 = _AO_Remapping_7;
            float2 _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2 = _Smoothness_Remapping_7;
            float2 _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2 = _Tiling_7;
            float2 _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2 = _Offset_7;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5e7d07e7199c46afa246f8f900df65e1;
            _LitLayer_5e7d07e7199c46afa246f8f900df65e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4;
            float3 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D, _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D, _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D, _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4, _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float, _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2, _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2, _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2, _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2, _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5e7d07e7199c46afa246f8f900df65e1, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float);
            float3 _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3);
            float3 _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3;
            Unity_Add_float3(_Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3);
            float3 _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3;
            Unity_Add_float3(_Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3, _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3);
            float _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float);
            float _Add_3995f6f6129448b09302fe5492790629_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float);
            float _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float;
            Unity_Add_float(_Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float, _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float);
            float _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float);
            float _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float);
            float _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float;
            Unity_Add_float(_Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float);
            float _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float;
            Unity_Add_float(_Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float);
            float3 _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3;
            Unity_Divide_float3(_Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxx), _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3);
            float3 _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            Unity_Normalize_float3(_Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3, _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3);
            float _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float, _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float);
            float _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float);
            float _Add_1d7868509d274829a85cfe104008340f_Out_2_Float;
            Unity_Add_float(_Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float, _Add_1d7868509d274829a85cfe104008340f_Out_2_Float);
            float _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float, _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float);
            float _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float);
            float _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float;
            Unity_Add_float(_Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float);
            float _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float;
            Unity_Add_float(_Add_1d7868509d274829a85cfe104008340f_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float, _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float);
            float _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            Unity_Divide_float(_Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float);
            surface.Alpha = 1;
            surface.NormalTS = _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            surface.Smoothness = _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
            normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
            fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "FullScreenDebug"
            Tags
            {
                "LightMode" = "FullScreenDebug"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest LEqual
        ZWrite Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TEXCOORD0
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float4 texCoord0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 TangentSpaceNormal;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float4 texCoord0 : INTERP0;
             float3 positionRWS : INTERP1;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.texCoord0.xyzw = input.texCoord0;
            output.positionRWS.xyz = input.positionRWS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Any_float4(float4 In, out float Out)
        {
            Out = any(In);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float
        {
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(UnityTexture2D _Albedo, UnityTexture2D _Normals, UnityTexture2D _Mask, float4 _Color_Tint, float _Normal_Scale, float2 _Metallic_Remapping, float2 _AO_Remapping, float2 _Smoothness_Remapping, float2 _Tiling, float2 _Offset, float _Layer_Weight, UnitySamplerState Sampler, Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float IN, out float4 Base_Color_1, out float3 Normals_2, out float Metallic_3, out float AO_4, out float Smoothness_5)
        {
        float4 _Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4 = _Color_Tint;
        UnityTexture2D _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D = _Albedo;
        float2 _Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2 = IN.AbsoluteWorldSpacePosition.xz;
        float2 _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2 = _Tiling;
        float2 _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2;
        Unity_Divide_float2(_Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2, _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2, _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2);
        float2 _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2 = _Offset;
        float2 _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2;
        Unity_Add_float2(_Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2, _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2, _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2);
        UnitySamplerState _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState = Sampler;
        float4 _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_R_4_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.r;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_G_5_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.g;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_B_6_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.b;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.a;
        float4 _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4, _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4);
        float _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float = _Layer_Weight;
        float4 _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxxx), _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4);
        UnityTexture2D _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D = _Normals;
        float4 _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4);
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_R_4_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.r;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_G_5_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.g;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_B_6_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.b;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_A_7_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.a;
        float _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float = _Normal_Scale;
        float3 _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.xyz), _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float, _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3);
        float3 _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxx), _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3);
        UnityTexture2D _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D = _Mask;
        float4 _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.r;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.g;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_B_6_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.b;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.a;
        float2 _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2 = _Metallic_Remapping;
        float _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float, float2 (0, 1), _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2, _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float);
        float _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        Unity_Multiply_float_float(_Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float);
        float2 _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2 = _AO_Remapping;
        float _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float, float2 (0, 1), _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2, _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float);
        float _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Unity_Multiply_float_float(_Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float);
        float _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean;
        Unity_Any_float4(_SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4, _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean);
        float _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float;
        Unity_Branch_float(_Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean, _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float, _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float);
        float2 _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2 = _Smoothness_Remapping;
        float _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float;
        Unity_Remap_float(_Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float, float2 (0, 1), _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2, _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float);
        float _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        Unity_Multiply_float_float(_Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float);
        Base_Color_1 = _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Normals_2 = _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Metallic_3 = _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        AO_4 = _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Smoothness_5 = _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_0);
            UnityTexture2D _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_0);
            UnityTexture2D _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_0);
            float4 _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_0) : _Color_Tint_0;
            float _Property_056e23a91826476486a6830c67445954_Out_0_Float = _Normal_Scale_0;
            float2 _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2 = _Metallic_Remapping_0;
            float2 _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2 = _AO_Remapping_0;
            float2 _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2 = _Smoothness_Remapping_0;
            float2 _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2 = _Tiling_0;
            float2 _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2 = _Offset_0;
            UnityTexture2D _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_0);
            float4 _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.tex, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.samplerstate, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_R_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.r;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_G_5_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.g;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_B_6_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.b;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_A_7_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.a;
            float _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[0];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[1];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[2];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006;
            _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4;
            float3 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D, _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D, _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D, _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4, _Property_056e23a91826476486a6830c67445954_Out_0_Float, _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2, _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2, _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2, _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2, _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float);
            UnityTexture2D _Property_baad51ce545849088095f56173420144_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_1);
            UnityTexture2D _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_1);
            UnityTexture2D _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_1);
            float4 _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_1) : _Color_Tint_1;
            float _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float = _Normal_Scale_1;
            float2 _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2 = _Metallic_Remapping_1;
            float2 _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2 = _AO_Remapping_1;
            float2 _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2 = _Smoothness_Remapping_1;
            float2 _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2 = _Tiling_1;
            float2 _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2 = _Offset_1;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_513ffd3dead74b5ca5456e2100244bdf;
            _LitLayer_513ffd3dead74b5ca5456e2100244bdf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4;
            float3 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_baad51ce545849088095f56173420144_Out_0_Texture2D, _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D, _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D, _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4, _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float, _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2, _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2, _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2, _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2, _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_513ffd3dead74b5ca5456e2100244bdf, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float);
            float4 _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4);
            UnityTexture2D _Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_2);
            UnityTexture2D _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_2);
            UnityTexture2D _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_2);
            float4 _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_2) : _Color_Tint_2;
            float _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float = _Normal_Scale_2;
            float2 _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2 = _Metallic_Remapping_2;
            float2 _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2 = _AO_Remapping_2;
            float2 _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2 = _Smoothness_Remapping_2;
            float2 _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2 = _Tiling_2;
            float2 _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2 = _Offset_2;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f;
            _LitLayer_1f2c81a1ccd84db58f59135fdd91517f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4;
            float3 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D, _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D, _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D, _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4, _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float, _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2, _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2, _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2, _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2, _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1f2c81a1ccd84db58f59135fdd91517f, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float);
            UnityTexture2D _Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_3);
            UnityTexture2D _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_3);
            UnityTexture2D _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_3);
            float4 _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_3) : _Color_Tint_3;
            float _Property_124a23e85f834643a4862644910febf0_Out_0_Float = _Normal_Scale_3;
            float2 _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2 = _Metallic_Remapping_3;
            float2 _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2 = _AO_Remapping_3;
            float2 _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2 = _Smoothness_Remapping_3;
            float2 _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2 = _Tiling_3;
            float2 _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2 = _Offset_3;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5255baca24fd4912bc05918766c7d91e;
            _LitLayer_5255baca24fd4912bc05918766c7d91e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4;
            float3 _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D, _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D, _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D, _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4, _Property_124a23e85f834643a4862644910febf0_Out_0_Float, _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2, _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2, _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2, _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2, _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5255baca24fd4912bc05918766c7d91e, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float);
            float4 _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4);
            float4 _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4;
            Unity_Add_float4(_Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4, _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4);
            UnityTexture2D _Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_4);
            UnityTexture2D _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_4);
            UnityTexture2D _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_4);
            float4 _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_4) : _Color_Tint_4;
            float _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float = _Normal_Scale_4;
            float2 _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2 = _Metallic_Remapping_4;
            float2 _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2 = _AO_Remapping_4;
            float2 _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2 = _Smoothness_Remapping_4;
            float2 _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2 = _Tiling_4;
            float2 _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2 = _Offset_4;
            UnityTexture2D _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_1);
            float4 _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.tex, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.samplerstate, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_R_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.r;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_G_5_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.g;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_B_6_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.b;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_A_7_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.a;
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[0];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[1];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[2];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_ff97f48270044dceb903e3d916a4bb9b;
            _LitLayer_ff97f48270044dceb903e3d916a4bb9b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4;
            float3 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D, _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D, _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D, _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4, _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float, _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2, _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2, _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2, _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2, _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_ff97f48270044dceb903e3d916a4bb9b, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float);
            UnityTexture2D _Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_5);
            UnityTexture2D _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_5);
            UnityTexture2D _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_5);
            float4 _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_5) : _Color_Tint_5;
            float _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float = _Normal_Scale_5;
            float2 _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2 = _Metallic_Remapping_5;
            float2 _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2 = _AO_Remapping_5;
            float2 _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2 = _Smoothness_Remapping_5;
            float2 _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2 = _Tiling_5;
            float2 _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2 = _Offset_5;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_f897f9464d51426ab77471c3030dc83e;
            _LitLayer_f897f9464d51426ab77471c3030dc83e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4;
            float3 _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D, _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D, _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D, _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4, _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float, _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2, _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2, _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2, _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2, _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_f897f9464d51426ab77471c3030dc83e, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float);
            float4 _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4);
            UnityTexture2D _Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_6);
            UnityTexture2D _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_6);
            UnityTexture2D _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_6);
            float4 _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_6) : _Color_Tint_6;
            float _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float = _Normal_Scale_6;
            float2 _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2 = _Metallic_Remapping_6;
            float2 _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2 = _AO_Remapping_6;
            float2 _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2 = _Smoothness_Remapping_6;
            float2 _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2 = _Tiling_6;
            float2 _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2 = _Offset_6;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1d3814484b5f4ec78dd6ead739661d68;
            _LitLayer_1d3814484b5f4ec78dd6ead739661d68.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4;
            float3 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D, _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D, _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D, _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4, _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float, _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2, _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2, _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2, _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2, _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1d3814484b5f4ec78dd6ead739661d68, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float);
            UnityTexture2D _Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_7);
            UnityTexture2D _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_7);
            UnityTexture2D _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_7);
            float4 _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_7) : _Color_Tint_7;
            float _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float = _Normal_Scale_7;
            float2 _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2 = _Metallic_Remapping_7;
            float2 _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2 = _AO_Remapping_7;
            float2 _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2 = _Smoothness_Remapping_7;
            float2 _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2 = _Tiling_7;
            float2 _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2 = _Offset_7;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5e7d07e7199c46afa246f8f900df65e1;
            _LitLayer_5e7d07e7199c46afa246f8f900df65e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4;
            float3 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D, _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D, _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D, _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4, _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float, _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2, _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2, _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2, _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2, _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5e7d07e7199c46afa246f8f900df65e1, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float);
            float4 _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4);
            float4 _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4;
            Unity_Add_float4(_Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4);
            float4 _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4;
            Unity_Add_float4(_Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4, _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4);
            float _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float);
            float _Add_3995f6f6129448b09302fe5492790629_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float);
            float _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float;
            Unity_Add_float(_Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float, _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float);
            float _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float);
            float _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float);
            float _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float;
            Unity_Add_float(_Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float);
            float _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float;
            Unity_Add_float(_Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float);
            float4 _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4;
            Unity_Divide_float4(_Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxxx), _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4);
            float _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float, _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float);
            float _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float);
            float _Add_1d7868509d274829a85cfe104008340f_Out_2_Float;
            Unity_Add_float(_Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float, _Add_1d7868509d274829a85cfe104008340f_Out_2_Float);
            float _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float, _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float);
            float _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float);
            float _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float;
            Unity_Add_float(_Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float);
            float _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float;
            Unity_Add_float(_Add_1d7868509d274829a85cfe104008340f_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float, _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float);
            float _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            Unity_Divide_float(_Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float);
            float _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float);
            float _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float);
            float _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float;
            Unity_Add_float(_Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float, _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float);
            float _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float);
            float _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float);
            float _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float;
            Unity_Add_float(_Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float);
            float _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float;
            Unity_Add_float(_Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float, _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float);
            float _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            Unity_Divide_float(_Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float);
            float3 _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3);
            float3 _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3);
            float3 _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3;
            Unity_Add_float3(_Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3, _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3);
            float3 _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3);
            float3 _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3);
            float3 _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3;
            Unity_Add_float3(_Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3);
            float3 _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3;
            Unity_Add_float3(_Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3, _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3);
            float3 _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3;
            Unity_Divide_float3(_Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxx), _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3);
            float3 _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            Unity_Normalize_float3(_Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3, _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3);
            float _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float);
            float _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float);
            float _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float;
            Unity_Add_float(_Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float, _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float);
            float _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float);
            float _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float);
            float _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float;
            Unity_Add_float(_Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float);
            float _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float;
            Unity_Add_float(_Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float, _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float);
            float _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            Unity_Divide_float(_Add_7660ed0f30444cdda982202340cff83d_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float);
            surface.BaseColor = (_Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4.xyz);
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            surface.Occlusion = _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            surface.NormalTS = _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            surface.Metallic = _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.texCoord0 =                  input.texCoord0;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
            normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
            fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassFullScreenDebug.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "DepthOnly"
            Tags
            {
                "LightMode" = "DepthOnly"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ WRITE_DECAL_BUFFER
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 TangentSpaceNormal;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float4 tangentWS : INTERP0;
             float4 texCoord0 : INTERP1;
             float3 positionRWS : INTERP2;
             float3 normalWS : INTERP3;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.positionRWS.xyz = input.positionRWS;
            output.normalWS.xyz = input.normalWS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Any_float4(float4 In, out float Out)
        {
            Out = any(In);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float
        {
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(UnityTexture2D _Albedo, UnityTexture2D _Normals, UnityTexture2D _Mask, float4 _Color_Tint, float _Normal_Scale, float2 _Metallic_Remapping, float2 _AO_Remapping, float2 _Smoothness_Remapping, float2 _Tiling, float2 _Offset, float _Layer_Weight, UnitySamplerState Sampler, Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float IN, out float4 Base_Color_1, out float3 Normals_2, out float Metallic_3, out float AO_4, out float Smoothness_5)
        {
        float4 _Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4 = _Color_Tint;
        UnityTexture2D _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D = _Albedo;
        float2 _Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2 = IN.AbsoluteWorldSpacePosition.xz;
        float2 _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2 = _Tiling;
        float2 _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2;
        Unity_Divide_float2(_Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2, _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2, _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2);
        float2 _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2 = _Offset;
        float2 _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2;
        Unity_Add_float2(_Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2, _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2, _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2);
        UnitySamplerState _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState = Sampler;
        float4 _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_R_4_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.r;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_G_5_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.g;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_B_6_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.b;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.a;
        float4 _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4, _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4);
        float _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float = _Layer_Weight;
        float4 _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxxx), _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4);
        UnityTexture2D _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D = _Normals;
        float4 _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4);
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_R_4_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.r;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_G_5_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.g;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_B_6_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.b;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_A_7_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.a;
        float _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float = _Normal_Scale;
        float3 _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.xyz), _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float, _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3);
        float3 _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxx), _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3);
        UnityTexture2D _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D = _Mask;
        float4 _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.r;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.g;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_B_6_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.b;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.a;
        float2 _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2 = _Metallic_Remapping;
        float _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float, float2 (0, 1), _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2, _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float);
        float _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        Unity_Multiply_float_float(_Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float);
        float2 _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2 = _AO_Remapping;
        float _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float, float2 (0, 1), _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2, _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float);
        float _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Unity_Multiply_float_float(_Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float);
        float _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean;
        Unity_Any_float4(_SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4, _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean);
        float _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float;
        Unity_Branch_float(_Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean, _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float, _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float);
        float2 _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2 = _Smoothness_Remapping;
        float _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float;
        Unity_Remap_float(_Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float, float2 (0, 1), _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2, _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float);
        float _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        Unity_Multiply_float_float(_Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float);
        Base_Color_1 = _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Normals_2 = _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Metallic_3 = _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        AO_4 = _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Smoothness_5 = _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_0);
            UnityTexture2D _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_0);
            UnityTexture2D _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_0);
            float4 _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_0) : _Color_Tint_0;
            float _Property_056e23a91826476486a6830c67445954_Out_0_Float = _Normal_Scale_0;
            float2 _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2 = _Metallic_Remapping_0;
            float2 _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2 = _AO_Remapping_0;
            float2 _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2 = _Smoothness_Remapping_0;
            float2 _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2 = _Tiling_0;
            float2 _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2 = _Offset_0;
            UnityTexture2D _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_0);
            float4 _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.tex, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.samplerstate, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_R_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.r;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_G_5_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.g;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_B_6_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.b;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_A_7_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.a;
            float _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[0];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[1];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[2];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006;
            _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4;
            float3 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D, _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D, _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D, _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4, _Property_056e23a91826476486a6830c67445954_Out_0_Float, _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2, _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2, _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2, _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2, _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float);
            UnityTexture2D _Property_baad51ce545849088095f56173420144_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_1);
            UnityTexture2D _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_1);
            UnityTexture2D _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_1);
            float4 _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_1) : _Color_Tint_1;
            float _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float = _Normal_Scale_1;
            float2 _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2 = _Metallic_Remapping_1;
            float2 _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2 = _AO_Remapping_1;
            float2 _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2 = _Smoothness_Remapping_1;
            float2 _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2 = _Tiling_1;
            float2 _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2 = _Offset_1;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_513ffd3dead74b5ca5456e2100244bdf;
            _LitLayer_513ffd3dead74b5ca5456e2100244bdf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4;
            float3 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_baad51ce545849088095f56173420144_Out_0_Texture2D, _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D, _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D, _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4, _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float, _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2, _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2, _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2, _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2, _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_513ffd3dead74b5ca5456e2100244bdf, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float);
            float4 _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4);
            UnityTexture2D _Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_2);
            UnityTexture2D _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_2);
            UnityTexture2D _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_2);
            float4 _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_2) : _Color_Tint_2;
            float _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float = _Normal_Scale_2;
            float2 _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2 = _Metallic_Remapping_2;
            float2 _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2 = _AO_Remapping_2;
            float2 _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2 = _Smoothness_Remapping_2;
            float2 _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2 = _Tiling_2;
            float2 _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2 = _Offset_2;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f;
            _LitLayer_1f2c81a1ccd84db58f59135fdd91517f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4;
            float3 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D, _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D, _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D, _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4, _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float, _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2, _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2, _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2, _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2, _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1f2c81a1ccd84db58f59135fdd91517f, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float);
            UnityTexture2D _Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_3);
            UnityTexture2D _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_3);
            UnityTexture2D _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_3);
            float4 _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_3) : _Color_Tint_3;
            float _Property_124a23e85f834643a4862644910febf0_Out_0_Float = _Normal_Scale_3;
            float2 _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2 = _Metallic_Remapping_3;
            float2 _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2 = _AO_Remapping_3;
            float2 _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2 = _Smoothness_Remapping_3;
            float2 _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2 = _Tiling_3;
            float2 _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2 = _Offset_3;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5255baca24fd4912bc05918766c7d91e;
            _LitLayer_5255baca24fd4912bc05918766c7d91e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4;
            float3 _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D, _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D, _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D, _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4, _Property_124a23e85f834643a4862644910febf0_Out_0_Float, _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2, _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2, _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2, _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2, _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5255baca24fd4912bc05918766c7d91e, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float);
            float4 _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4);
            float4 _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4;
            Unity_Add_float4(_Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4, _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4);
            UnityTexture2D _Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_4);
            UnityTexture2D _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_4);
            UnityTexture2D _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_4);
            float4 _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_4) : _Color_Tint_4;
            float _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float = _Normal_Scale_4;
            float2 _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2 = _Metallic_Remapping_4;
            float2 _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2 = _AO_Remapping_4;
            float2 _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2 = _Smoothness_Remapping_4;
            float2 _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2 = _Tiling_4;
            float2 _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2 = _Offset_4;
            UnityTexture2D _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_1);
            float4 _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.tex, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.samplerstate, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_R_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.r;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_G_5_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.g;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_B_6_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.b;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_A_7_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.a;
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[0];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[1];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[2];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_ff97f48270044dceb903e3d916a4bb9b;
            _LitLayer_ff97f48270044dceb903e3d916a4bb9b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4;
            float3 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D, _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D, _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D, _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4, _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float, _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2, _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2, _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2, _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2, _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_ff97f48270044dceb903e3d916a4bb9b, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float);
            UnityTexture2D _Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_5);
            UnityTexture2D _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_5);
            UnityTexture2D _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_5);
            float4 _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_5) : _Color_Tint_5;
            float _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float = _Normal_Scale_5;
            float2 _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2 = _Metallic_Remapping_5;
            float2 _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2 = _AO_Remapping_5;
            float2 _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2 = _Smoothness_Remapping_5;
            float2 _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2 = _Tiling_5;
            float2 _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2 = _Offset_5;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_f897f9464d51426ab77471c3030dc83e;
            _LitLayer_f897f9464d51426ab77471c3030dc83e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4;
            float3 _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D, _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D, _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D, _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4, _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float, _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2, _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2, _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2, _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2, _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_f897f9464d51426ab77471c3030dc83e, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float);
            float4 _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4);
            UnityTexture2D _Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_6);
            UnityTexture2D _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_6);
            UnityTexture2D _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_6);
            float4 _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_6) : _Color_Tint_6;
            float _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float = _Normal_Scale_6;
            float2 _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2 = _Metallic_Remapping_6;
            float2 _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2 = _AO_Remapping_6;
            float2 _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2 = _Smoothness_Remapping_6;
            float2 _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2 = _Tiling_6;
            float2 _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2 = _Offset_6;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1d3814484b5f4ec78dd6ead739661d68;
            _LitLayer_1d3814484b5f4ec78dd6ead739661d68.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4;
            float3 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D, _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D, _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D, _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4, _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float, _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2, _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2, _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2, _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2, _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1d3814484b5f4ec78dd6ead739661d68, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float);
            UnityTexture2D _Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_7);
            UnityTexture2D _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_7);
            UnityTexture2D _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_7);
            float4 _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_7) : _Color_Tint_7;
            float _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float = _Normal_Scale_7;
            float2 _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2 = _Metallic_Remapping_7;
            float2 _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2 = _AO_Remapping_7;
            float2 _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2 = _Smoothness_Remapping_7;
            float2 _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2 = _Tiling_7;
            float2 _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2 = _Offset_7;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5e7d07e7199c46afa246f8f900df65e1;
            _LitLayer_5e7d07e7199c46afa246f8f900df65e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4;
            float3 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D, _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D, _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D, _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4, _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float, _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2, _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2, _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2, _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2, _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5e7d07e7199c46afa246f8f900df65e1, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float);
            float4 _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4);
            float4 _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4;
            Unity_Add_float4(_Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4);
            float4 _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4;
            Unity_Add_float4(_Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4, _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4);
            float _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float);
            float _Add_3995f6f6129448b09302fe5492790629_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float);
            float _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float;
            Unity_Add_float(_Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float, _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float);
            float _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float);
            float _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float);
            float _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float;
            Unity_Add_float(_Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float);
            float _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float;
            Unity_Add_float(_Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float);
            float4 _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4;
            Unity_Divide_float4(_Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxxx), _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4);
            float _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float, _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float);
            float _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float);
            float _Add_1d7868509d274829a85cfe104008340f_Out_2_Float;
            Unity_Add_float(_Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float, _Add_1d7868509d274829a85cfe104008340f_Out_2_Float);
            float _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float, _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float);
            float _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float);
            float _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float;
            Unity_Add_float(_Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float);
            float _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float;
            Unity_Add_float(_Add_1d7868509d274829a85cfe104008340f_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float, _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float);
            float _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            Unity_Divide_float(_Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float);
            float _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float);
            float _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float);
            float _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float;
            Unity_Add_float(_Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float, _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float);
            float _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float);
            float _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float);
            float _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float;
            Unity_Add_float(_Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float);
            float _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float;
            Unity_Add_float(_Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float, _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float);
            float _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            Unity_Divide_float(_Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float);
            float3 _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3);
            float3 _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3);
            float3 _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3;
            Unity_Add_float3(_Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3, _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3);
            float3 _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3);
            float3 _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3);
            float3 _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3;
            Unity_Add_float3(_Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3);
            float3 _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3;
            Unity_Add_float3(_Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3, _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3);
            float3 _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3;
            Unity_Divide_float3(_Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxx), _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3);
            float3 _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            Unity_Normalize_float3(_Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3, _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3);
            float _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float);
            float _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float);
            float _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float;
            Unity_Add_float(_Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float, _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float);
            float _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float);
            float _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float);
            float _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float;
            Unity_Add_float(_Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float);
            float _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float;
            Unity_Add_float(_Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float, _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float);
            float _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            Unity_Divide_float(_Add_7660ed0f30444cdda982202340cff83d_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float);
            surface.BaseColor = (_Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4.xyz);
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            surface.Occlusion = _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            surface.NormalTS = _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            surface.Metallic = _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
            normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
            fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "GBuffer"
            Tags
            {
                "LightMode" = "GBuffer"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest [_ZTestGBuffer]
        ColorMask [_LightLayersMaskBuffer4] 4
        ColorMask [_LightLayersMaskBuffer5] 5
        Stencil
        {
        WriteMask [_StencilWriteMaskGBuffer]
        Ref [_StencilRefGBuffer]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile_fragment _ LIGHT_LAYERS
        #pragma multi_compile_raytracing _ LIGHT_LAYERS
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD1
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_GBUFFER
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 TangentSpaceNormal;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float4 tangentWS : INTERP0;
             float4 texCoord0 : INTERP1;
             float4 texCoord1 : INTERP2;
             float4 texCoord2 : INTERP3;
             float3 positionRWS : INTERP4;
             float3 normalWS : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.texCoord1.xyzw = input.texCoord1;
            output.texCoord2.xyzw = input.texCoord2;
            output.positionRWS.xyz = input.positionRWS;
            output.normalWS.xyz = input.normalWS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.texCoord1 = input.texCoord1.xyzw;
            output.texCoord2 = input.texCoord2.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Any_float4(float4 In, out float Out)
        {
            Out = any(In);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float
        {
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(UnityTexture2D _Albedo, UnityTexture2D _Normals, UnityTexture2D _Mask, float4 _Color_Tint, float _Normal_Scale, float2 _Metallic_Remapping, float2 _AO_Remapping, float2 _Smoothness_Remapping, float2 _Tiling, float2 _Offset, float _Layer_Weight, UnitySamplerState Sampler, Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float IN, out float4 Base_Color_1, out float3 Normals_2, out float Metallic_3, out float AO_4, out float Smoothness_5)
        {
        float4 _Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4 = _Color_Tint;
        UnityTexture2D _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D = _Albedo;
        float2 _Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2 = IN.AbsoluteWorldSpacePosition.xz;
        float2 _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2 = _Tiling;
        float2 _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2;
        Unity_Divide_float2(_Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2, _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2, _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2);
        float2 _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2 = _Offset;
        float2 _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2;
        Unity_Add_float2(_Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2, _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2, _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2);
        UnitySamplerState _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState = Sampler;
        float4 _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_R_4_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.r;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_G_5_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.g;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_B_6_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.b;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.a;
        float4 _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4, _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4);
        float _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float = _Layer_Weight;
        float4 _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxxx), _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4);
        UnityTexture2D _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D = _Normals;
        float4 _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4);
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_R_4_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.r;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_G_5_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.g;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_B_6_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.b;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_A_7_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.a;
        float _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float = _Normal_Scale;
        float3 _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.xyz), _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float, _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3);
        float3 _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxx), _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3);
        UnityTexture2D _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D = _Mask;
        float4 _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.r;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.g;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_B_6_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.b;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.a;
        float2 _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2 = _Metallic_Remapping;
        float _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float, float2 (0, 1), _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2, _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float);
        float _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        Unity_Multiply_float_float(_Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float);
        float2 _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2 = _AO_Remapping;
        float _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float, float2 (0, 1), _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2, _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float);
        float _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Unity_Multiply_float_float(_Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float);
        float _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean;
        Unity_Any_float4(_SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4, _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean);
        float _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float;
        Unity_Branch_float(_Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean, _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float, _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float);
        float2 _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2 = _Smoothness_Remapping;
        float _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float;
        Unity_Remap_float(_Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float, float2 (0, 1), _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2, _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float);
        float _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        Unity_Multiply_float_float(_Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float);
        Base_Color_1 = _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Normals_2 = _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Metallic_3 = _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        AO_4 = _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Smoothness_5 = _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_0);
            UnityTexture2D _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_0);
            UnityTexture2D _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_0);
            float4 _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_0) : _Color_Tint_0;
            float _Property_056e23a91826476486a6830c67445954_Out_0_Float = _Normal_Scale_0;
            float2 _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2 = _Metallic_Remapping_0;
            float2 _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2 = _AO_Remapping_0;
            float2 _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2 = _Smoothness_Remapping_0;
            float2 _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2 = _Tiling_0;
            float2 _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2 = _Offset_0;
            UnityTexture2D _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_0);
            float4 _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.tex, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.samplerstate, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_R_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.r;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_G_5_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.g;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_B_6_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.b;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_A_7_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.a;
            float _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[0];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[1];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[2];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006;
            _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4;
            float3 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D, _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D, _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D, _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4, _Property_056e23a91826476486a6830c67445954_Out_0_Float, _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2, _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2, _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2, _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2, _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float);
            UnityTexture2D _Property_baad51ce545849088095f56173420144_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_1);
            UnityTexture2D _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_1);
            UnityTexture2D _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_1);
            float4 _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_1) : _Color_Tint_1;
            float _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float = _Normal_Scale_1;
            float2 _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2 = _Metallic_Remapping_1;
            float2 _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2 = _AO_Remapping_1;
            float2 _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2 = _Smoothness_Remapping_1;
            float2 _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2 = _Tiling_1;
            float2 _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2 = _Offset_1;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_513ffd3dead74b5ca5456e2100244bdf;
            _LitLayer_513ffd3dead74b5ca5456e2100244bdf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4;
            float3 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_baad51ce545849088095f56173420144_Out_0_Texture2D, _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D, _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D, _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4, _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float, _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2, _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2, _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2, _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2, _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_513ffd3dead74b5ca5456e2100244bdf, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float);
            float4 _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4);
            UnityTexture2D _Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_2);
            UnityTexture2D _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_2);
            UnityTexture2D _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_2);
            float4 _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_2) : _Color_Tint_2;
            float _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float = _Normal_Scale_2;
            float2 _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2 = _Metallic_Remapping_2;
            float2 _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2 = _AO_Remapping_2;
            float2 _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2 = _Smoothness_Remapping_2;
            float2 _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2 = _Tiling_2;
            float2 _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2 = _Offset_2;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f;
            _LitLayer_1f2c81a1ccd84db58f59135fdd91517f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4;
            float3 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D, _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D, _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D, _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4, _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float, _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2, _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2, _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2, _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2, _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1f2c81a1ccd84db58f59135fdd91517f, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float);
            UnityTexture2D _Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_3);
            UnityTexture2D _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_3);
            UnityTexture2D _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_3);
            float4 _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_3) : _Color_Tint_3;
            float _Property_124a23e85f834643a4862644910febf0_Out_0_Float = _Normal_Scale_3;
            float2 _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2 = _Metallic_Remapping_3;
            float2 _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2 = _AO_Remapping_3;
            float2 _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2 = _Smoothness_Remapping_3;
            float2 _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2 = _Tiling_3;
            float2 _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2 = _Offset_3;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5255baca24fd4912bc05918766c7d91e;
            _LitLayer_5255baca24fd4912bc05918766c7d91e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4;
            float3 _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D, _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D, _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D, _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4, _Property_124a23e85f834643a4862644910febf0_Out_0_Float, _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2, _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2, _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2, _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2, _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5255baca24fd4912bc05918766c7d91e, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float);
            float4 _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4);
            float4 _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4;
            Unity_Add_float4(_Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4, _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4);
            UnityTexture2D _Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_4);
            UnityTexture2D _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_4);
            UnityTexture2D _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_4);
            float4 _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_4) : _Color_Tint_4;
            float _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float = _Normal_Scale_4;
            float2 _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2 = _Metallic_Remapping_4;
            float2 _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2 = _AO_Remapping_4;
            float2 _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2 = _Smoothness_Remapping_4;
            float2 _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2 = _Tiling_4;
            float2 _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2 = _Offset_4;
            UnityTexture2D _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_1);
            float4 _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.tex, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.samplerstate, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_R_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.r;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_G_5_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.g;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_B_6_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.b;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_A_7_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.a;
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[0];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[1];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[2];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_ff97f48270044dceb903e3d916a4bb9b;
            _LitLayer_ff97f48270044dceb903e3d916a4bb9b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4;
            float3 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D, _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D, _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D, _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4, _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float, _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2, _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2, _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2, _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2, _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_ff97f48270044dceb903e3d916a4bb9b, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float);
            UnityTexture2D _Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_5);
            UnityTexture2D _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_5);
            UnityTexture2D _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_5);
            float4 _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_5) : _Color_Tint_5;
            float _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float = _Normal_Scale_5;
            float2 _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2 = _Metallic_Remapping_5;
            float2 _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2 = _AO_Remapping_5;
            float2 _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2 = _Smoothness_Remapping_5;
            float2 _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2 = _Tiling_5;
            float2 _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2 = _Offset_5;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_f897f9464d51426ab77471c3030dc83e;
            _LitLayer_f897f9464d51426ab77471c3030dc83e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4;
            float3 _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D, _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D, _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D, _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4, _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float, _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2, _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2, _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2, _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2, _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_f897f9464d51426ab77471c3030dc83e, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float);
            float4 _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4);
            UnityTexture2D _Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_6);
            UnityTexture2D _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_6);
            UnityTexture2D _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_6);
            float4 _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_6) : _Color_Tint_6;
            float _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float = _Normal_Scale_6;
            float2 _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2 = _Metallic_Remapping_6;
            float2 _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2 = _AO_Remapping_6;
            float2 _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2 = _Smoothness_Remapping_6;
            float2 _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2 = _Tiling_6;
            float2 _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2 = _Offset_6;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1d3814484b5f4ec78dd6ead739661d68;
            _LitLayer_1d3814484b5f4ec78dd6ead739661d68.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4;
            float3 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D, _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D, _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D, _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4, _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float, _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2, _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2, _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2, _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2, _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1d3814484b5f4ec78dd6ead739661d68, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float);
            UnityTexture2D _Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_7);
            UnityTexture2D _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_7);
            UnityTexture2D _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_7);
            float4 _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_7) : _Color_Tint_7;
            float _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float = _Normal_Scale_7;
            float2 _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2 = _Metallic_Remapping_7;
            float2 _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2 = _AO_Remapping_7;
            float2 _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2 = _Smoothness_Remapping_7;
            float2 _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2 = _Tiling_7;
            float2 _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2 = _Offset_7;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5e7d07e7199c46afa246f8f900df65e1;
            _LitLayer_5e7d07e7199c46afa246f8f900df65e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4;
            float3 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D, _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D, _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D, _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4, _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float, _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2, _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2, _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2, _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2, _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5e7d07e7199c46afa246f8f900df65e1, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float);
            float4 _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4);
            float4 _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4;
            Unity_Add_float4(_Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4);
            float4 _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4;
            Unity_Add_float4(_Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4, _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4);
            float _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float);
            float _Add_3995f6f6129448b09302fe5492790629_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float);
            float _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float;
            Unity_Add_float(_Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float, _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float);
            float _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float);
            float _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float);
            float _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float;
            Unity_Add_float(_Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float);
            float _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float;
            Unity_Add_float(_Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float);
            float4 _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4;
            Unity_Divide_float4(_Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxxx), _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4);
            float _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float, _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float);
            float _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float);
            float _Add_1d7868509d274829a85cfe104008340f_Out_2_Float;
            Unity_Add_float(_Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float, _Add_1d7868509d274829a85cfe104008340f_Out_2_Float);
            float _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float, _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float);
            float _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float);
            float _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float;
            Unity_Add_float(_Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float);
            float _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float;
            Unity_Add_float(_Add_1d7868509d274829a85cfe104008340f_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float, _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float);
            float _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            Unity_Divide_float(_Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float);
            float _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float);
            float _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float);
            float _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float;
            Unity_Add_float(_Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float, _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float);
            float _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float);
            float _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float);
            float _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float;
            Unity_Add_float(_Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float);
            float _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float;
            Unity_Add_float(_Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float, _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float);
            float _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            Unity_Divide_float(_Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float);
            float3 _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3);
            float3 _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3);
            float3 _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3;
            Unity_Add_float3(_Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3, _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3);
            float3 _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3);
            float3 _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3);
            float3 _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3;
            Unity_Add_float3(_Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3);
            float3 _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3;
            Unity_Add_float3(_Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3, _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3);
            float3 _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3;
            Unity_Divide_float3(_Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxx), _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3);
            float3 _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            Unity_Normalize_float3(_Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3, _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3);
            float _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float);
            float _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float);
            float _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float;
            Unity_Add_float(_Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float, _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float);
            float _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float);
            float _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float);
            float _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float;
            Unity_Add_float(_Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float);
            float _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float;
            Unity_Add_float(_Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float, _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float);
            float _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            Unity_Divide_float(_Add_7660ed0f30444cdda982202340cff83d_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float);
            surface.BaseColor = (_Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4.xyz);
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            surface.Occlusion = _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            surface.NormalTS = _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            surface.Metallic = _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
            normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
            fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "Forward"
            Tags
            {
                "LightMode" = "Forward"
            }
        
            // Render State
            Cull [_CullModeForward]
        Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
        Blend 1 SrcAlpha OneMinusSrcAlpha
        ZTest [_ZTestDepthEqualForOpaque]
        ZWrite [_ZWrite]
        ColorMask [_ColorMaskTransparentVelOne] 1
        ColorMask [_ColorMaskTransparentVelTwo] 2
        Stencil
        {
        WriteMask [_StencilWriteMask]
        Ref [_StencilRef]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma multi_compile_fragment SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH
        #pragma multi_compile_fragment AREA_SHADOW_MEDIUM AREA_SHADOW_HIGH
        #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
        #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD1
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_FORWARD
        #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING 1
        #define HAS_LIGHTLOOP 1
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SHADER_LIT 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 TangentSpaceNormal;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float4 tangentWS : INTERP0;
             float4 texCoord0 : INTERP1;
             float4 texCoord1 : INTERP2;
             float4 texCoord2 : INTERP3;
             float3 positionRWS : INTERP4;
             float3 normalWS : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.texCoord1.xyzw = input.texCoord1;
            output.texCoord2.xyzw = input.texCoord2;
            output.positionRWS.xyz = input.positionRWS;
            output.normalWS.xyz = input.normalWS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.texCoord1 = input.texCoord1.xyzw;
            output.texCoord2 = input.texCoord2.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Any_float4(float4 In, out float Out)
        {
            Out = any(In);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float
        {
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(UnityTexture2D _Albedo, UnityTexture2D _Normals, UnityTexture2D _Mask, float4 _Color_Tint, float _Normal_Scale, float2 _Metallic_Remapping, float2 _AO_Remapping, float2 _Smoothness_Remapping, float2 _Tiling, float2 _Offset, float _Layer_Weight, UnitySamplerState Sampler, Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float IN, out float4 Base_Color_1, out float3 Normals_2, out float Metallic_3, out float AO_4, out float Smoothness_5)
        {
        float4 _Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4 = _Color_Tint;
        UnityTexture2D _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D = _Albedo;
        float2 _Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2 = IN.AbsoluteWorldSpacePosition.xz;
        float2 _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2 = _Tiling;
        float2 _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2;
        Unity_Divide_float2(_Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2, _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2, _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2);
        float2 _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2 = _Offset;
        float2 _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2;
        Unity_Add_float2(_Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2, _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2, _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2);
        UnitySamplerState _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState = Sampler;
        float4 _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_R_4_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.r;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_G_5_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.g;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_B_6_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.b;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.a;
        float4 _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4, _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4);
        float _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float = _Layer_Weight;
        float4 _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxxx), _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4);
        UnityTexture2D _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D = _Normals;
        float4 _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4);
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_R_4_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.r;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_G_5_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.g;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_B_6_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.b;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_A_7_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.a;
        float _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float = _Normal_Scale;
        float3 _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.xyz), _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float, _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3);
        float3 _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxx), _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3);
        UnityTexture2D _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D = _Mask;
        float4 _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.r;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.g;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_B_6_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.b;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.a;
        float2 _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2 = _Metallic_Remapping;
        float _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float, float2 (0, 1), _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2, _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float);
        float _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        Unity_Multiply_float_float(_Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float);
        float2 _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2 = _AO_Remapping;
        float _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float, float2 (0, 1), _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2, _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float);
        float _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Unity_Multiply_float_float(_Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float);
        float _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean;
        Unity_Any_float4(_SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4, _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean);
        float _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float;
        Unity_Branch_float(_Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean, _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float, _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float);
        float2 _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2 = _Smoothness_Remapping;
        float _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float;
        Unity_Remap_float(_Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float, float2 (0, 1), _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2, _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float);
        float _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        Unity_Multiply_float_float(_Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float);
        Base_Color_1 = _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Normals_2 = _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Metallic_3 = _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        AO_4 = _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Smoothness_5 = _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_0);
            UnityTexture2D _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_0);
            UnityTexture2D _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_0);
            float4 _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_0) : _Color_Tint_0;
            float _Property_056e23a91826476486a6830c67445954_Out_0_Float = _Normal_Scale_0;
            float2 _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2 = _Metallic_Remapping_0;
            float2 _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2 = _AO_Remapping_0;
            float2 _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2 = _Smoothness_Remapping_0;
            float2 _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2 = _Tiling_0;
            float2 _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2 = _Offset_0;
            UnityTexture2D _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_0);
            float4 _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.tex, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.samplerstate, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_R_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.r;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_G_5_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.g;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_B_6_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.b;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_A_7_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.a;
            float _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[0];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[1];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[2];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006;
            _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4;
            float3 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D, _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D, _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D, _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4, _Property_056e23a91826476486a6830c67445954_Out_0_Float, _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2, _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2, _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2, _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2, _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float);
            UnityTexture2D _Property_baad51ce545849088095f56173420144_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_1);
            UnityTexture2D _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_1);
            UnityTexture2D _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_1);
            float4 _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_1) : _Color_Tint_1;
            float _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float = _Normal_Scale_1;
            float2 _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2 = _Metallic_Remapping_1;
            float2 _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2 = _AO_Remapping_1;
            float2 _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2 = _Smoothness_Remapping_1;
            float2 _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2 = _Tiling_1;
            float2 _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2 = _Offset_1;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_513ffd3dead74b5ca5456e2100244bdf;
            _LitLayer_513ffd3dead74b5ca5456e2100244bdf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4;
            float3 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_baad51ce545849088095f56173420144_Out_0_Texture2D, _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D, _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D, _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4, _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float, _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2, _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2, _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2, _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2, _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_513ffd3dead74b5ca5456e2100244bdf, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float);
            float4 _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4);
            UnityTexture2D _Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_2);
            UnityTexture2D _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_2);
            UnityTexture2D _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_2);
            float4 _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_2) : _Color_Tint_2;
            float _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float = _Normal_Scale_2;
            float2 _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2 = _Metallic_Remapping_2;
            float2 _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2 = _AO_Remapping_2;
            float2 _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2 = _Smoothness_Remapping_2;
            float2 _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2 = _Tiling_2;
            float2 _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2 = _Offset_2;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f;
            _LitLayer_1f2c81a1ccd84db58f59135fdd91517f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4;
            float3 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D, _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D, _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D, _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4, _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float, _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2, _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2, _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2, _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2, _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1f2c81a1ccd84db58f59135fdd91517f, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float);
            UnityTexture2D _Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_3);
            UnityTexture2D _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_3);
            UnityTexture2D _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_3);
            float4 _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_3) : _Color_Tint_3;
            float _Property_124a23e85f834643a4862644910febf0_Out_0_Float = _Normal_Scale_3;
            float2 _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2 = _Metallic_Remapping_3;
            float2 _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2 = _AO_Remapping_3;
            float2 _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2 = _Smoothness_Remapping_3;
            float2 _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2 = _Tiling_3;
            float2 _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2 = _Offset_3;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5255baca24fd4912bc05918766c7d91e;
            _LitLayer_5255baca24fd4912bc05918766c7d91e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4;
            float3 _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D, _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D, _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D, _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4, _Property_124a23e85f834643a4862644910febf0_Out_0_Float, _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2, _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2, _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2, _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2, _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5255baca24fd4912bc05918766c7d91e, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float);
            float4 _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4);
            float4 _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4;
            Unity_Add_float4(_Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4, _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4);
            UnityTexture2D _Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_4);
            UnityTexture2D _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_4);
            UnityTexture2D _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_4);
            float4 _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_4) : _Color_Tint_4;
            float _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float = _Normal_Scale_4;
            float2 _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2 = _Metallic_Remapping_4;
            float2 _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2 = _AO_Remapping_4;
            float2 _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2 = _Smoothness_Remapping_4;
            float2 _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2 = _Tiling_4;
            float2 _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2 = _Offset_4;
            UnityTexture2D _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_1);
            float4 _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.tex, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.samplerstate, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_R_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.r;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_G_5_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.g;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_B_6_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.b;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_A_7_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.a;
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[0];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[1];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[2];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_ff97f48270044dceb903e3d916a4bb9b;
            _LitLayer_ff97f48270044dceb903e3d916a4bb9b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4;
            float3 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D, _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D, _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D, _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4, _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float, _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2, _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2, _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2, _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2, _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_ff97f48270044dceb903e3d916a4bb9b, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float);
            UnityTexture2D _Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_5);
            UnityTexture2D _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_5);
            UnityTexture2D _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_5);
            float4 _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_5) : _Color_Tint_5;
            float _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float = _Normal_Scale_5;
            float2 _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2 = _Metallic_Remapping_5;
            float2 _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2 = _AO_Remapping_5;
            float2 _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2 = _Smoothness_Remapping_5;
            float2 _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2 = _Tiling_5;
            float2 _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2 = _Offset_5;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_f897f9464d51426ab77471c3030dc83e;
            _LitLayer_f897f9464d51426ab77471c3030dc83e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4;
            float3 _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D, _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D, _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D, _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4, _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float, _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2, _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2, _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2, _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2, _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_f897f9464d51426ab77471c3030dc83e, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float);
            float4 _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4);
            UnityTexture2D _Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_6);
            UnityTexture2D _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_6);
            UnityTexture2D _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_6);
            float4 _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_6) : _Color_Tint_6;
            float _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float = _Normal_Scale_6;
            float2 _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2 = _Metallic_Remapping_6;
            float2 _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2 = _AO_Remapping_6;
            float2 _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2 = _Smoothness_Remapping_6;
            float2 _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2 = _Tiling_6;
            float2 _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2 = _Offset_6;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1d3814484b5f4ec78dd6ead739661d68;
            _LitLayer_1d3814484b5f4ec78dd6ead739661d68.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4;
            float3 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D, _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D, _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D, _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4, _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float, _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2, _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2, _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2, _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2, _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1d3814484b5f4ec78dd6ead739661d68, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float);
            UnityTexture2D _Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_7);
            UnityTexture2D _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_7);
            UnityTexture2D _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_7);
            float4 _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_7) : _Color_Tint_7;
            float _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float = _Normal_Scale_7;
            float2 _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2 = _Metallic_Remapping_7;
            float2 _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2 = _AO_Remapping_7;
            float2 _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2 = _Smoothness_Remapping_7;
            float2 _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2 = _Tiling_7;
            float2 _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2 = _Offset_7;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5e7d07e7199c46afa246f8f900df65e1;
            _LitLayer_5e7d07e7199c46afa246f8f900df65e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4;
            float3 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D, _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D, _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D, _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4, _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float, _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2, _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2, _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2, _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2, _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5e7d07e7199c46afa246f8f900df65e1, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float);
            float4 _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4);
            float4 _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4;
            Unity_Add_float4(_Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4);
            float4 _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4;
            Unity_Add_float4(_Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4, _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4);
            float _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float);
            float _Add_3995f6f6129448b09302fe5492790629_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float);
            float _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float;
            Unity_Add_float(_Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float, _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float);
            float _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float);
            float _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float);
            float _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float;
            Unity_Add_float(_Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float);
            float _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float;
            Unity_Add_float(_Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float);
            float4 _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4;
            Unity_Divide_float4(_Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxxx), _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4);
            float _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float, _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float);
            float _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float);
            float _Add_1d7868509d274829a85cfe104008340f_Out_2_Float;
            Unity_Add_float(_Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float, _Add_1d7868509d274829a85cfe104008340f_Out_2_Float);
            float _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float, _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float);
            float _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float);
            float _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float;
            Unity_Add_float(_Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float);
            float _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float;
            Unity_Add_float(_Add_1d7868509d274829a85cfe104008340f_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float, _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float);
            float _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            Unity_Divide_float(_Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float);
            float _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float);
            float _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float);
            float _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float;
            Unity_Add_float(_Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float, _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float);
            float _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float);
            float _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float);
            float _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float;
            Unity_Add_float(_Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float);
            float _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float;
            Unity_Add_float(_Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float, _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float);
            float _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            Unity_Divide_float(_Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float);
            float3 _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3);
            float3 _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3);
            float3 _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3;
            Unity_Add_float3(_Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3, _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3);
            float3 _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3);
            float3 _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3);
            float3 _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3;
            Unity_Add_float3(_Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3);
            float3 _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3;
            Unity_Add_float3(_Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3, _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3);
            float3 _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3;
            Unity_Divide_float3(_Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxx), _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3);
            float3 _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            Unity_Normalize_float3(_Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3, _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3);
            float _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float);
            float _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float);
            float _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float;
            Unity_Add_float(_Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float, _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float);
            float _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float);
            float _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float);
            float _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float;
            Unity_Add_float(_Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float);
            float _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float;
            Unity_Add_float(_Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float, _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float);
            float _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            Unity_Divide_float(_Add_7660ed0f30444cdda982202340cff83d_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float);
            surface.BaseColor = (_Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4.xyz);
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            surface.Occlusion = _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            surface.NormalTS = _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            surface.Metallic = _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
            normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
            fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "RayTracingPrepass"
            Tags
            {
                "LightMode" = "RayTracingPrepass"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One Zero
        ZWrite On
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TEXCOORD0
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_CONSTANT
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float4 texCoord0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 TangentSpaceNormal;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float4 texCoord0 : INTERP0;
             float3 positionRWS : INTERP1;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.texCoord0.xyzw = input.texCoord0;
            output.positionRWS.xyz = input.positionRWS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Any_float4(float4 In, out float Out)
        {
            Out = any(In);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float
        {
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(UnityTexture2D _Albedo, UnityTexture2D _Normals, UnityTexture2D _Mask, float4 _Color_Tint, float _Normal_Scale, float2 _Metallic_Remapping, float2 _AO_Remapping, float2 _Smoothness_Remapping, float2 _Tiling, float2 _Offset, float _Layer_Weight, UnitySamplerState Sampler, Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float IN, out float4 Base_Color_1, out float3 Normals_2, out float Metallic_3, out float AO_4, out float Smoothness_5)
        {
        float4 _Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4 = _Color_Tint;
        UnityTexture2D _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D = _Albedo;
        float2 _Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2 = IN.AbsoluteWorldSpacePosition.xz;
        float2 _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2 = _Tiling;
        float2 _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2;
        Unity_Divide_float2(_Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2, _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2, _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2);
        float2 _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2 = _Offset;
        float2 _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2;
        Unity_Add_float2(_Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2, _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2, _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2);
        UnitySamplerState _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState = Sampler;
        float4 _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_R_4_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.r;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_G_5_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.g;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_B_6_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.b;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.a;
        float4 _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4, _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4);
        float _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float = _Layer_Weight;
        float4 _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxxx), _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4);
        UnityTexture2D _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D = _Normals;
        float4 _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4);
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_R_4_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.r;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_G_5_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.g;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_B_6_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.b;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_A_7_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.a;
        float _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float = _Normal_Scale;
        float3 _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.xyz), _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float, _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3);
        float3 _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxx), _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3);
        UnityTexture2D _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D = _Mask;
        float4 _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.r;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.g;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_B_6_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.b;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.a;
        float2 _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2 = _Metallic_Remapping;
        float _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float, float2 (0, 1), _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2, _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float);
        float _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        Unity_Multiply_float_float(_Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float);
        float2 _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2 = _AO_Remapping;
        float _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float, float2 (0, 1), _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2, _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float);
        float _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Unity_Multiply_float_float(_Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float);
        float _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean;
        Unity_Any_float4(_SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4, _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean);
        float _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float;
        Unity_Branch_float(_Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean, _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float, _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float);
        float2 _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2 = _Smoothness_Remapping;
        float _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float;
        Unity_Remap_float(_Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float, float2 (0, 1), _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2, _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float);
        float _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        Unity_Multiply_float_float(_Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float);
        Base_Color_1 = _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Normals_2 = _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Metallic_3 = _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        AO_4 = _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Smoothness_5 = _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            description.Position = IN.ObjectSpacePosition;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_0);
            UnityTexture2D _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_0);
            UnityTexture2D _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_0);
            float4 _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_0) : _Color_Tint_0;
            float _Property_056e23a91826476486a6830c67445954_Out_0_Float = _Normal_Scale_0;
            float2 _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2 = _Metallic_Remapping_0;
            float2 _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2 = _AO_Remapping_0;
            float2 _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2 = _Smoothness_Remapping_0;
            float2 _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2 = _Tiling_0;
            float2 _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2 = _Offset_0;
            UnityTexture2D _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_0);
            float4 _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.tex, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.samplerstate, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_R_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.r;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_G_5_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.g;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_B_6_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.b;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_A_7_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.a;
            float _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[0];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[1];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[2];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006;
            _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4;
            float3 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D, _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D, _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D, _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4, _Property_056e23a91826476486a6830c67445954_Out_0_Float, _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2, _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2, _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2, _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2, _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float);
            UnityTexture2D _Property_baad51ce545849088095f56173420144_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_1);
            UnityTexture2D _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_1);
            UnityTexture2D _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_1);
            float4 _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_1) : _Color_Tint_1;
            float _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float = _Normal_Scale_1;
            float2 _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2 = _Metallic_Remapping_1;
            float2 _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2 = _AO_Remapping_1;
            float2 _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2 = _Smoothness_Remapping_1;
            float2 _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2 = _Tiling_1;
            float2 _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2 = _Offset_1;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_513ffd3dead74b5ca5456e2100244bdf;
            _LitLayer_513ffd3dead74b5ca5456e2100244bdf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4;
            float3 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_baad51ce545849088095f56173420144_Out_0_Texture2D, _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D, _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D, _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4, _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float, _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2, _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2, _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2, _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2, _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_513ffd3dead74b5ca5456e2100244bdf, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float);
            float4 _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4);
            UnityTexture2D _Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_2);
            UnityTexture2D _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_2);
            UnityTexture2D _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_2);
            float4 _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_2) : _Color_Tint_2;
            float _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float = _Normal_Scale_2;
            float2 _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2 = _Metallic_Remapping_2;
            float2 _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2 = _AO_Remapping_2;
            float2 _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2 = _Smoothness_Remapping_2;
            float2 _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2 = _Tiling_2;
            float2 _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2 = _Offset_2;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f;
            _LitLayer_1f2c81a1ccd84db58f59135fdd91517f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4;
            float3 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D, _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D, _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D, _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4, _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float, _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2, _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2, _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2, _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2, _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1f2c81a1ccd84db58f59135fdd91517f, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float);
            UnityTexture2D _Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_3);
            UnityTexture2D _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_3);
            UnityTexture2D _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_3);
            float4 _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_3) : _Color_Tint_3;
            float _Property_124a23e85f834643a4862644910febf0_Out_0_Float = _Normal_Scale_3;
            float2 _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2 = _Metallic_Remapping_3;
            float2 _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2 = _AO_Remapping_3;
            float2 _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2 = _Smoothness_Remapping_3;
            float2 _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2 = _Tiling_3;
            float2 _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2 = _Offset_3;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5255baca24fd4912bc05918766c7d91e;
            _LitLayer_5255baca24fd4912bc05918766c7d91e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4;
            float3 _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D, _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D, _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D, _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4, _Property_124a23e85f834643a4862644910febf0_Out_0_Float, _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2, _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2, _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2, _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2, _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5255baca24fd4912bc05918766c7d91e, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float);
            float4 _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4);
            float4 _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4;
            Unity_Add_float4(_Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4, _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4);
            UnityTexture2D _Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_4);
            UnityTexture2D _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_4);
            UnityTexture2D _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_4);
            float4 _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_4) : _Color_Tint_4;
            float _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float = _Normal_Scale_4;
            float2 _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2 = _Metallic_Remapping_4;
            float2 _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2 = _AO_Remapping_4;
            float2 _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2 = _Smoothness_Remapping_4;
            float2 _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2 = _Tiling_4;
            float2 _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2 = _Offset_4;
            UnityTexture2D _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_1);
            float4 _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.tex, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.samplerstate, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_R_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.r;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_G_5_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.g;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_B_6_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.b;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_A_7_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.a;
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[0];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[1];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[2];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_ff97f48270044dceb903e3d916a4bb9b;
            _LitLayer_ff97f48270044dceb903e3d916a4bb9b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4;
            float3 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D, _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D, _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D, _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4, _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float, _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2, _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2, _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2, _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2, _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_ff97f48270044dceb903e3d916a4bb9b, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float);
            UnityTexture2D _Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_5);
            UnityTexture2D _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_5);
            UnityTexture2D _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_5);
            float4 _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_5) : _Color_Tint_5;
            float _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float = _Normal_Scale_5;
            float2 _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2 = _Metallic_Remapping_5;
            float2 _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2 = _AO_Remapping_5;
            float2 _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2 = _Smoothness_Remapping_5;
            float2 _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2 = _Tiling_5;
            float2 _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2 = _Offset_5;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_f897f9464d51426ab77471c3030dc83e;
            _LitLayer_f897f9464d51426ab77471c3030dc83e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4;
            float3 _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D, _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D, _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D, _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4, _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float, _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2, _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2, _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2, _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2, _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_f897f9464d51426ab77471c3030dc83e, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float);
            float4 _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4);
            UnityTexture2D _Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_6);
            UnityTexture2D _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_6);
            UnityTexture2D _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_6);
            float4 _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_6) : _Color_Tint_6;
            float _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float = _Normal_Scale_6;
            float2 _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2 = _Metallic_Remapping_6;
            float2 _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2 = _AO_Remapping_6;
            float2 _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2 = _Smoothness_Remapping_6;
            float2 _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2 = _Tiling_6;
            float2 _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2 = _Offset_6;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1d3814484b5f4ec78dd6ead739661d68;
            _LitLayer_1d3814484b5f4ec78dd6ead739661d68.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4;
            float3 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D, _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D, _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D, _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4, _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float, _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2, _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2, _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2, _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2, _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1d3814484b5f4ec78dd6ead739661d68, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float);
            UnityTexture2D _Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_7);
            UnityTexture2D _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_7);
            UnityTexture2D _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_7);
            float4 _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_7) : _Color_Tint_7;
            float _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float = _Normal_Scale_7;
            float2 _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2 = _Metallic_Remapping_7;
            float2 _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2 = _AO_Remapping_7;
            float2 _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2 = _Smoothness_Remapping_7;
            float2 _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2 = _Tiling_7;
            float2 _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2 = _Offset_7;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5e7d07e7199c46afa246f8f900df65e1;
            _LitLayer_5e7d07e7199c46afa246f8f900df65e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4;
            float3 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D, _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D, _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D, _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4, _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float, _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2, _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2, _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2, _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2, _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5e7d07e7199c46afa246f8f900df65e1, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float);
            float4 _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4);
            float4 _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4;
            Unity_Add_float4(_Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4);
            float4 _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4;
            Unity_Add_float4(_Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4, _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4);
            float _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float);
            float _Add_3995f6f6129448b09302fe5492790629_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float);
            float _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float;
            Unity_Add_float(_Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float, _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float);
            float _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float);
            float _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float);
            float _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float;
            Unity_Add_float(_Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float);
            float _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float;
            Unity_Add_float(_Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float);
            float4 _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4;
            Unity_Divide_float4(_Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxxx), _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4);
            float _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float, _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float);
            float _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float);
            float _Add_1d7868509d274829a85cfe104008340f_Out_2_Float;
            Unity_Add_float(_Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float, _Add_1d7868509d274829a85cfe104008340f_Out_2_Float);
            float _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float, _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float);
            float _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float);
            float _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float;
            Unity_Add_float(_Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float);
            float _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float;
            Unity_Add_float(_Add_1d7868509d274829a85cfe104008340f_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float, _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float);
            float _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            Unity_Divide_float(_Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float);
            float _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float);
            float _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float);
            float _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float;
            Unity_Add_float(_Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float, _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float);
            float _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float);
            float _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float);
            float _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float;
            Unity_Add_float(_Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float);
            float _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float;
            Unity_Add_float(_Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float, _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float);
            float _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            Unity_Divide_float(_Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float);
            float3 _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3);
            float3 _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3);
            float3 _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3;
            Unity_Add_float3(_Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3, _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3);
            float3 _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3);
            float3 _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3);
            float3 _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3;
            Unity_Add_float3(_Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3);
            float3 _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3;
            Unity_Add_float3(_Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3, _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3);
            float3 _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3;
            Unity_Divide_float3(_Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxx), _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3);
            float3 _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            Unity_Normalize_float3(_Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3, _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3);
            float _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float);
            float _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float);
            float _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float;
            Unity_Add_float(_Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float, _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float);
            float _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float);
            float _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float);
            float _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float;
            Unity_Add_float(_Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float);
            float _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float;
            Unity_Add_float(_Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float, _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float);
            float _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            Unity_Divide_float(_Add_7660ed0f30444cdda982202340cff83d_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float);
            surface.BaseColor = (_Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4.xyz);
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            surface.Occlusion = _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            surface.NormalTS = _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            surface.Metallic = _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.texCoord0 =                  input.texCoord0;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
            normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
            fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassConstant.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="Geometry+225"
            "DisableBatching"="False"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "IndirectDXR"
            Tags
            {
                "LightMode" = "IndirectDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma multi_compile _ MULTI_BOUNCE_INDIRECT
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD1
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_INDIRECT
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define HAS_LIGHTLOOP 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 TangentSpaceNormal;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Any_float4(float4 In, out float Out)
        {
            Out = any(In);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float
        {
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(UnityTexture2D _Albedo, UnityTexture2D _Normals, UnityTexture2D _Mask, float4 _Color_Tint, float _Normal_Scale, float2 _Metallic_Remapping, float2 _AO_Remapping, float2 _Smoothness_Remapping, float2 _Tiling, float2 _Offset, float _Layer_Weight, UnitySamplerState Sampler, Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float IN, out float4 Base_Color_1, out float3 Normals_2, out float Metallic_3, out float AO_4, out float Smoothness_5)
        {
        float4 _Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4 = _Color_Tint;
        UnityTexture2D _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D = _Albedo;
        float2 _Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2 = IN.AbsoluteWorldSpacePosition.xz;
        float2 _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2 = _Tiling;
        float2 _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2;
        Unity_Divide_float2(_Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2, _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2, _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2);
        float2 _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2 = _Offset;
        float2 _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2;
        Unity_Add_float2(_Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2, _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2, _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2);
        UnitySamplerState _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState = Sampler;
        float4 _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_R_4_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.r;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_G_5_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.g;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_B_6_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.b;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.a;
        float4 _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4, _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4);
        float _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float = _Layer_Weight;
        float4 _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxxx), _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4);
        UnityTexture2D _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D = _Normals;
        float4 _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4);
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_R_4_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.r;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_G_5_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.g;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_B_6_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.b;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_A_7_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.a;
        float _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float = _Normal_Scale;
        float3 _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.xyz), _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float, _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3);
        float3 _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxx), _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3);
        UnityTexture2D _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D = _Mask;
        float4 _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.r;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.g;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_B_6_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.b;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.a;
        float2 _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2 = _Metallic_Remapping;
        float _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float, float2 (0, 1), _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2, _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float);
        float _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        Unity_Multiply_float_float(_Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float);
        float2 _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2 = _AO_Remapping;
        float _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float, float2 (0, 1), _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2, _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float);
        float _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Unity_Multiply_float_float(_Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float);
        float _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean;
        Unity_Any_float4(_SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4, _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean);
        float _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float;
        Unity_Branch_float(_Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean, _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float, _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float);
        float2 _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2 = _Smoothness_Remapping;
        float _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float;
        Unity_Remap_float(_Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float, float2 (0, 1), _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2, _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float);
        float _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        Unity_Multiply_float_float(_Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float);
        Base_Color_1 = _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Normals_2 = _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Metallic_3 = _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        AO_4 = _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Smoothness_5 = _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_0);
            UnityTexture2D _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_0);
            UnityTexture2D _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_0);
            float4 _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_0) : _Color_Tint_0;
            float _Property_056e23a91826476486a6830c67445954_Out_0_Float = _Normal_Scale_0;
            float2 _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2 = _Metallic_Remapping_0;
            float2 _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2 = _AO_Remapping_0;
            float2 _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2 = _Smoothness_Remapping_0;
            float2 _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2 = _Tiling_0;
            float2 _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2 = _Offset_0;
            UnityTexture2D _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_0);
            float4 _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.tex, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.samplerstate, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_R_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.r;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_G_5_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.g;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_B_6_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.b;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_A_7_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.a;
            float _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[0];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[1];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[2];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006;
            _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4;
            float3 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D, _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D, _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D, _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4, _Property_056e23a91826476486a6830c67445954_Out_0_Float, _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2, _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2, _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2, _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2, _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float);
            UnityTexture2D _Property_baad51ce545849088095f56173420144_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_1);
            UnityTexture2D _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_1);
            UnityTexture2D _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_1);
            float4 _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_1) : _Color_Tint_1;
            float _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float = _Normal_Scale_1;
            float2 _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2 = _Metallic_Remapping_1;
            float2 _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2 = _AO_Remapping_1;
            float2 _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2 = _Smoothness_Remapping_1;
            float2 _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2 = _Tiling_1;
            float2 _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2 = _Offset_1;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_513ffd3dead74b5ca5456e2100244bdf;
            _LitLayer_513ffd3dead74b5ca5456e2100244bdf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4;
            float3 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_baad51ce545849088095f56173420144_Out_0_Texture2D, _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D, _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D, _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4, _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float, _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2, _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2, _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2, _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2, _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_513ffd3dead74b5ca5456e2100244bdf, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float);
            float4 _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4);
            UnityTexture2D _Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_2);
            UnityTexture2D _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_2);
            UnityTexture2D _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_2);
            float4 _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_2) : _Color_Tint_2;
            float _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float = _Normal_Scale_2;
            float2 _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2 = _Metallic_Remapping_2;
            float2 _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2 = _AO_Remapping_2;
            float2 _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2 = _Smoothness_Remapping_2;
            float2 _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2 = _Tiling_2;
            float2 _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2 = _Offset_2;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f;
            _LitLayer_1f2c81a1ccd84db58f59135fdd91517f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4;
            float3 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D, _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D, _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D, _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4, _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float, _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2, _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2, _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2, _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2, _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1f2c81a1ccd84db58f59135fdd91517f, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float);
            UnityTexture2D _Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_3);
            UnityTexture2D _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_3);
            UnityTexture2D _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_3);
            float4 _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_3) : _Color_Tint_3;
            float _Property_124a23e85f834643a4862644910febf0_Out_0_Float = _Normal_Scale_3;
            float2 _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2 = _Metallic_Remapping_3;
            float2 _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2 = _AO_Remapping_3;
            float2 _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2 = _Smoothness_Remapping_3;
            float2 _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2 = _Tiling_3;
            float2 _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2 = _Offset_3;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5255baca24fd4912bc05918766c7d91e;
            _LitLayer_5255baca24fd4912bc05918766c7d91e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4;
            float3 _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D, _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D, _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D, _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4, _Property_124a23e85f834643a4862644910febf0_Out_0_Float, _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2, _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2, _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2, _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2, _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5255baca24fd4912bc05918766c7d91e, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float);
            float4 _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4);
            float4 _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4;
            Unity_Add_float4(_Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4, _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4);
            UnityTexture2D _Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_4);
            UnityTexture2D _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_4);
            UnityTexture2D _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_4);
            float4 _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_4) : _Color_Tint_4;
            float _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float = _Normal_Scale_4;
            float2 _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2 = _Metallic_Remapping_4;
            float2 _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2 = _AO_Remapping_4;
            float2 _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2 = _Smoothness_Remapping_4;
            float2 _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2 = _Tiling_4;
            float2 _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2 = _Offset_4;
            UnityTexture2D _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_1);
            float4 _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.tex, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.samplerstate, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_R_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.r;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_G_5_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.g;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_B_6_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.b;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_A_7_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.a;
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[0];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[1];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[2];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_ff97f48270044dceb903e3d916a4bb9b;
            _LitLayer_ff97f48270044dceb903e3d916a4bb9b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4;
            float3 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D, _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D, _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D, _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4, _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float, _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2, _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2, _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2, _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2, _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_ff97f48270044dceb903e3d916a4bb9b, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float);
            UnityTexture2D _Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_5);
            UnityTexture2D _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_5);
            UnityTexture2D _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_5);
            float4 _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_5) : _Color_Tint_5;
            float _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float = _Normal_Scale_5;
            float2 _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2 = _Metallic_Remapping_5;
            float2 _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2 = _AO_Remapping_5;
            float2 _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2 = _Smoothness_Remapping_5;
            float2 _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2 = _Tiling_5;
            float2 _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2 = _Offset_5;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_f897f9464d51426ab77471c3030dc83e;
            _LitLayer_f897f9464d51426ab77471c3030dc83e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4;
            float3 _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D, _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D, _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D, _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4, _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float, _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2, _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2, _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2, _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2, _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_f897f9464d51426ab77471c3030dc83e, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float);
            float4 _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4);
            UnityTexture2D _Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_6);
            UnityTexture2D _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_6);
            UnityTexture2D _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_6);
            float4 _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_6) : _Color_Tint_6;
            float _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float = _Normal_Scale_6;
            float2 _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2 = _Metallic_Remapping_6;
            float2 _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2 = _AO_Remapping_6;
            float2 _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2 = _Smoothness_Remapping_6;
            float2 _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2 = _Tiling_6;
            float2 _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2 = _Offset_6;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1d3814484b5f4ec78dd6ead739661d68;
            _LitLayer_1d3814484b5f4ec78dd6ead739661d68.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4;
            float3 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D, _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D, _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D, _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4, _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float, _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2, _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2, _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2, _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2, _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1d3814484b5f4ec78dd6ead739661d68, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float);
            UnityTexture2D _Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_7);
            UnityTexture2D _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_7);
            UnityTexture2D _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_7);
            float4 _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_7) : _Color_Tint_7;
            float _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float = _Normal_Scale_7;
            float2 _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2 = _Metallic_Remapping_7;
            float2 _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2 = _AO_Remapping_7;
            float2 _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2 = _Smoothness_Remapping_7;
            float2 _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2 = _Tiling_7;
            float2 _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2 = _Offset_7;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5e7d07e7199c46afa246f8f900df65e1;
            _LitLayer_5e7d07e7199c46afa246f8f900df65e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4;
            float3 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D, _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D, _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D, _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4, _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float, _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2, _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2, _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2, _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2, _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5e7d07e7199c46afa246f8f900df65e1, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float);
            float4 _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4);
            float4 _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4;
            Unity_Add_float4(_Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4);
            float4 _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4;
            Unity_Add_float4(_Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4, _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4);
            float _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float);
            float _Add_3995f6f6129448b09302fe5492790629_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float);
            float _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float;
            Unity_Add_float(_Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float, _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float);
            float _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float);
            float _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float);
            float _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float;
            Unity_Add_float(_Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float);
            float _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float;
            Unity_Add_float(_Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float);
            float4 _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4;
            Unity_Divide_float4(_Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxxx), _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4);
            float _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float, _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float);
            float _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float);
            float _Add_1d7868509d274829a85cfe104008340f_Out_2_Float;
            Unity_Add_float(_Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float, _Add_1d7868509d274829a85cfe104008340f_Out_2_Float);
            float _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float, _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float);
            float _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float);
            float _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float;
            Unity_Add_float(_Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float);
            float _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float;
            Unity_Add_float(_Add_1d7868509d274829a85cfe104008340f_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float, _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float);
            float _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            Unity_Divide_float(_Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float);
            float _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float);
            float _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float);
            float _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float;
            Unity_Add_float(_Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float, _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float);
            float _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float);
            float _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float);
            float _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float;
            Unity_Add_float(_Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float);
            float _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float;
            Unity_Add_float(_Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float, _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float);
            float _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            Unity_Divide_float(_Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float);
            float3 _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3);
            float3 _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3);
            float3 _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3;
            Unity_Add_float3(_Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3, _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3);
            float3 _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3);
            float3 _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3);
            float3 _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3;
            Unity_Add_float3(_Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3);
            float3 _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3;
            Unity_Add_float3(_Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3, _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3);
            float3 _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3;
            Unity_Divide_float3(_Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxx), _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3);
            float3 _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            Unity_Normalize_float3(_Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3, _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3);
            float _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float);
            float _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float);
            float _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float;
            Unity_Add_float(_Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float, _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float);
            float _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float);
            float _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float);
            float _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float;
            Unity_Add_float(_Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float);
            float _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float;
            Unity_Add_float(_Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float, _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float);
            float _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            Unity_Divide_float(_Add_7660ed0f30444cdda982202340cff83d_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float);
            surface.BaseColor = (_Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4.xyz);
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            surface.Occlusion = _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            surface.NormalTS = _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            surface.Metallic = _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
            normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
            fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingIndirect.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "VisibilityDXR"
            Tags
            {
                "LightMode" = "VisibilityDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma multi_compile _ TRANSPARENT_COLOR_SHADOW
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TEXCOORD0
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_VISIBILITY
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 TangentSpaceNormal;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Any_float4(float4 In, out float Out)
        {
            Out = any(In);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float
        {
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(UnityTexture2D _Albedo, UnityTexture2D _Normals, UnityTexture2D _Mask, float4 _Color_Tint, float _Normal_Scale, float2 _Metallic_Remapping, float2 _AO_Remapping, float2 _Smoothness_Remapping, float2 _Tiling, float2 _Offset, float _Layer_Weight, UnitySamplerState Sampler, Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float IN, out float4 Base_Color_1, out float3 Normals_2, out float Metallic_3, out float AO_4, out float Smoothness_5)
        {
        float4 _Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4 = _Color_Tint;
        UnityTexture2D _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D = _Albedo;
        float2 _Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2 = IN.AbsoluteWorldSpacePosition.xz;
        float2 _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2 = _Tiling;
        float2 _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2;
        Unity_Divide_float2(_Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2, _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2, _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2);
        float2 _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2 = _Offset;
        float2 _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2;
        Unity_Add_float2(_Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2, _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2, _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2);
        UnitySamplerState _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState = Sampler;
        float4 _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_R_4_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.r;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_G_5_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.g;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_B_6_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.b;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.a;
        float4 _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4, _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4);
        float _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float = _Layer_Weight;
        float4 _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxxx), _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4);
        UnityTexture2D _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D = _Normals;
        float4 _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4);
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_R_4_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.r;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_G_5_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.g;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_B_6_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.b;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_A_7_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.a;
        float _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float = _Normal_Scale;
        float3 _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.xyz), _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float, _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3);
        float3 _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxx), _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3);
        UnityTexture2D _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D = _Mask;
        float4 _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.r;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.g;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_B_6_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.b;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.a;
        float2 _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2 = _Metallic_Remapping;
        float _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float, float2 (0, 1), _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2, _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float);
        float _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        Unity_Multiply_float_float(_Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float);
        float2 _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2 = _AO_Remapping;
        float _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float, float2 (0, 1), _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2, _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float);
        float _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Unity_Multiply_float_float(_Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float);
        float _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean;
        Unity_Any_float4(_SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4, _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean);
        float _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float;
        Unity_Branch_float(_Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean, _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float, _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float);
        float2 _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2 = _Smoothness_Remapping;
        float _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float;
        Unity_Remap_float(_Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float, float2 (0, 1), _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2, _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float);
        float _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        Unity_Multiply_float_float(_Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float);
        Base_Color_1 = _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Normals_2 = _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Metallic_3 = _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        AO_4 = _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Smoothness_5 = _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_0);
            UnityTexture2D _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_0);
            UnityTexture2D _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_0);
            float4 _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_0) : _Color_Tint_0;
            float _Property_056e23a91826476486a6830c67445954_Out_0_Float = _Normal_Scale_0;
            float2 _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2 = _Metallic_Remapping_0;
            float2 _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2 = _AO_Remapping_0;
            float2 _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2 = _Smoothness_Remapping_0;
            float2 _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2 = _Tiling_0;
            float2 _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2 = _Offset_0;
            UnityTexture2D _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_0);
            float4 _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.tex, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.samplerstate, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_R_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.r;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_G_5_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.g;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_B_6_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.b;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_A_7_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.a;
            float _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[0];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[1];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[2];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006;
            _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4;
            float3 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D, _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D, _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D, _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4, _Property_056e23a91826476486a6830c67445954_Out_0_Float, _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2, _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2, _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2, _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2, _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float);
            UnityTexture2D _Property_baad51ce545849088095f56173420144_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_1);
            UnityTexture2D _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_1);
            UnityTexture2D _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_1);
            float4 _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_1) : _Color_Tint_1;
            float _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float = _Normal_Scale_1;
            float2 _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2 = _Metallic_Remapping_1;
            float2 _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2 = _AO_Remapping_1;
            float2 _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2 = _Smoothness_Remapping_1;
            float2 _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2 = _Tiling_1;
            float2 _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2 = _Offset_1;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_513ffd3dead74b5ca5456e2100244bdf;
            _LitLayer_513ffd3dead74b5ca5456e2100244bdf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4;
            float3 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_baad51ce545849088095f56173420144_Out_0_Texture2D, _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D, _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D, _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4, _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float, _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2, _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2, _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2, _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2, _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_513ffd3dead74b5ca5456e2100244bdf, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float);
            float4 _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4);
            UnityTexture2D _Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_2);
            UnityTexture2D _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_2);
            UnityTexture2D _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_2);
            float4 _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_2) : _Color_Tint_2;
            float _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float = _Normal_Scale_2;
            float2 _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2 = _Metallic_Remapping_2;
            float2 _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2 = _AO_Remapping_2;
            float2 _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2 = _Smoothness_Remapping_2;
            float2 _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2 = _Tiling_2;
            float2 _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2 = _Offset_2;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f;
            _LitLayer_1f2c81a1ccd84db58f59135fdd91517f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4;
            float3 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D, _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D, _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D, _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4, _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float, _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2, _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2, _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2, _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2, _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1f2c81a1ccd84db58f59135fdd91517f, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float);
            UnityTexture2D _Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_3);
            UnityTexture2D _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_3);
            UnityTexture2D _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_3);
            float4 _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_3) : _Color_Tint_3;
            float _Property_124a23e85f834643a4862644910febf0_Out_0_Float = _Normal_Scale_3;
            float2 _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2 = _Metallic_Remapping_3;
            float2 _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2 = _AO_Remapping_3;
            float2 _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2 = _Smoothness_Remapping_3;
            float2 _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2 = _Tiling_3;
            float2 _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2 = _Offset_3;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5255baca24fd4912bc05918766c7d91e;
            _LitLayer_5255baca24fd4912bc05918766c7d91e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4;
            float3 _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D, _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D, _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D, _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4, _Property_124a23e85f834643a4862644910febf0_Out_0_Float, _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2, _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2, _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2, _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2, _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5255baca24fd4912bc05918766c7d91e, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float);
            float4 _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4);
            float4 _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4;
            Unity_Add_float4(_Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4, _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4);
            UnityTexture2D _Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_4);
            UnityTexture2D _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_4);
            UnityTexture2D _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_4);
            float4 _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_4) : _Color_Tint_4;
            float _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float = _Normal_Scale_4;
            float2 _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2 = _Metallic_Remapping_4;
            float2 _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2 = _AO_Remapping_4;
            float2 _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2 = _Smoothness_Remapping_4;
            float2 _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2 = _Tiling_4;
            float2 _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2 = _Offset_4;
            UnityTexture2D _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_1);
            float4 _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.tex, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.samplerstate, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_R_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.r;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_G_5_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.g;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_B_6_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.b;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_A_7_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.a;
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[0];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[1];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[2];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_ff97f48270044dceb903e3d916a4bb9b;
            _LitLayer_ff97f48270044dceb903e3d916a4bb9b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4;
            float3 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D, _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D, _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D, _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4, _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float, _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2, _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2, _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2, _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2, _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_ff97f48270044dceb903e3d916a4bb9b, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float);
            UnityTexture2D _Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_5);
            UnityTexture2D _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_5);
            UnityTexture2D _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_5);
            float4 _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_5) : _Color_Tint_5;
            float _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float = _Normal_Scale_5;
            float2 _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2 = _Metallic_Remapping_5;
            float2 _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2 = _AO_Remapping_5;
            float2 _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2 = _Smoothness_Remapping_5;
            float2 _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2 = _Tiling_5;
            float2 _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2 = _Offset_5;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_f897f9464d51426ab77471c3030dc83e;
            _LitLayer_f897f9464d51426ab77471c3030dc83e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4;
            float3 _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D, _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D, _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D, _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4, _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float, _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2, _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2, _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2, _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2, _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_f897f9464d51426ab77471c3030dc83e, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float);
            float4 _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4);
            UnityTexture2D _Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_6);
            UnityTexture2D _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_6);
            UnityTexture2D _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_6);
            float4 _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_6) : _Color_Tint_6;
            float _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float = _Normal_Scale_6;
            float2 _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2 = _Metallic_Remapping_6;
            float2 _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2 = _AO_Remapping_6;
            float2 _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2 = _Smoothness_Remapping_6;
            float2 _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2 = _Tiling_6;
            float2 _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2 = _Offset_6;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1d3814484b5f4ec78dd6ead739661d68;
            _LitLayer_1d3814484b5f4ec78dd6ead739661d68.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4;
            float3 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D, _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D, _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D, _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4, _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float, _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2, _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2, _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2, _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2, _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1d3814484b5f4ec78dd6ead739661d68, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float);
            UnityTexture2D _Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_7);
            UnityTexture2D _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_7);
            UnityTexture2D _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_7);
            float4 _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_7) : _Color_Tint_7;
            float _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float = _Normal_Scale_7;
            float2 _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2 = _Metallic_Remapping_7;
            float2 _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2 = _AO_Remapping_7;
            float2 _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2 = _Smoothness_Remapping_7;
            float2 _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2 = _Tiling_7;
            float2 _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2 = _Offset_7;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5e7d07e7199c46afa246f8f900df65e1;
            _LitLayer_5e7d07e7199c46afa246f8f900df65e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4;
            float3 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D, _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D, _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D, _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4, _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float, _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2, _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2, _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2, _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2, _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5e7d07e7199c46afa246f8f900df65e1, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float);
            float4 _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4);
            float4 _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4;
            Unity_Add_float4(_Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4);
            float4 _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4;
            Unity_Add_float4(_Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4, _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4);
            float _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float);
            float _Add_3995f6f6129448b09302fe5492790629_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float);
            float _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float;
            Unity_Add_float(_Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float, _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float);
            float _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float);
            float _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float);
            float _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float;
            Unity_Add_float(_Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float);
            float _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float;
            Unity_Add_float(_Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float);
            float4 _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4;
            Unity_Divide_float4(_Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxxx), _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4);
            float _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float, _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float);
            float _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float);
            float _Add_1d7868509d274829a85cfe104008340f_Out_2_Float;
            Unity_Add_float(_Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float, _Add_1d7868509d274829a85cfe104008340f_Out_2_Float);
            float _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float, _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float);
            float _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float);
            float _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float;
            Unity_Add_float(_Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float);
            float _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float;
            Unity_Add_float(_Add_1d7868509d274829a85cfe104008340f_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float, _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float);
            float _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            Unity_Divide_float(_Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float);
            float _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float);
            float _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float);
            float _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float;
            Unity_Add_float(_Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float, _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float);
            float _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float);
            float _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float);
            float _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float;
            Unity_Add_float(_Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float);
            float _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float;
            Unity_Add_float(_Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float, _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float);
            float _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            Unity_Divide_float(_Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float);
            float3 _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3);
            float3 _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3);
            float3 _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3;
            Unity_Add_float3(_Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3, _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3);
            float3 _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3);
            float3 _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3);
            float3 _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3;
            Unity_Add_float3(_Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3);
            float3 _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3;
            Unity_Add_float3(_Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3, _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3);
            float3 _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3;
            Unity_Divide_float3(_Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxx), _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3);
            float3 _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            Unity_Normalize_float3(_Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3, _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3);
            float _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float);
            float _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float);
            float _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float;
            Unity_Add_float(_Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float, _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float);
            float _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float);
            float _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float);
            float _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float;
            Unity_Add_float(_Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float);
            float _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float;
            Unity_Add_float(_Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float, _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float);
            float _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            Unity_Divide_float(_Add_7660ed0f30444cdda982202340cff83d_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float);
            surface.BaseColor = (_Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4.xyz);
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            surface.Occlusion = _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            surface.NormalTS = _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            surface.Metallic = _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
            normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
            fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingVisibility.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "ForwardDXR"
            Tags
            {
                "LightMode" = "ForwardDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD1
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_FORWARD
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define HAS_LIGHTLOOP 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 TangentSpaceNormal;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Any_float4(float4 In, out float Out)
        {
            Out = any(In);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float
        {
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(UnityTexture2D _Albedo, UnityTexture2D _Normals, UnityTexture2D _Mask, float4 _Color_Tint, float _Normal_Scale, float2 _Metallic_Remapping, float2 _AO_Remapping, float2 _Smoothness_Remapping, float2 _Tiling, float2 _Offset, float _Layer_Weight, UnitySamplerState Sampler, Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float IN, out float4 Base_Color_1, out float3 Normals_2, out float Metallic_3, out float AO_4, out float Smoothness_5)
        {
        float4 _Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4 = _Color_Tint;
        UnityTexture2D _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D = _Albedo;
        float2 _Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2 = IN.AbsoluteWorldSpacePosition.xz;
        float2 _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2 = _Tiling;
        float2 _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2;
        Unity_Divide_float2(_Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2, _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2, _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2);
        float2 _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2 = _Offset;
        float2 _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2;
        Unity_Add_float2(_Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2, _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2, _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2);
        UnitySamplerState _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState = Sampler;
        float4 _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_R_4_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.r;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_G_5_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.g;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_B_6_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.b;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.a;
        float4 _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4, _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4);
        float _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float = _Layer_Weight;
        float4 _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxxx), _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4);
        UnityTexture2D _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D = _Normals;
        float4 _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4);
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_R_4_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.r;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_G_5_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.g;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_B_6_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.b;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_A_7_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.a;
        float _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float = _Normal_Scale;
        float3 _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.xyz), _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float, _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3);
        float3 _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxx), _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3);
        UnityTexture2D _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D = _Mask;
        float4 _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.r;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.g;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_B_6_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.b;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.a;
        float2 _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2 = _Metallic_Remapping;
        float _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float, float2 (0, 1), _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2, _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float);
        float _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        Unity_Multiply_float_float(_Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float);
        float2 _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2 = _AO_Remapping;
        float _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float, float2 (0, 1), _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2, _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float);
        float _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Unity_Multiply_float_float(_Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float);
        float _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean;
        Unity_Any_float4(_SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4, _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean);
        float _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float;
        Unity_Branch_float(_Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean, _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float, _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float);
        float2 _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2 = _Smoothness_Remapping;
        float _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float;
        Unity_Remap_float(_Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float, float2 (0, 1), _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2, _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float);
        float _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        Unity_Multiply_float_float(_Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float);
        Base_Color_1 = _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Normals_2 = _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Metallic_3 = _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        AO_4 = _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Smoothness_5 = _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_0);
            UnityTexture2D _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_0);
            UnityTexture2D _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_0);
            float4 _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_0) : _Color_Tint_0;
            float _Property_056e23a91826476486a6830c67445954_Out_0_Float = _Normal_Scale_0;
            float2 _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2 = _Metallic_Remapping_0;
            float2 _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2 = _AO_Remapping_0;
            float2 _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2 = _Smoothness_Remapping_0;
            float2 _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2 = _Tiling_0;
            float2 _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2 = _Offset_0;
            UnityTexture2D _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_0);
            float4 _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.tex, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.samplerstate, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_R_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.r;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_G_5_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.g;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_B_6_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.b;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_A_7_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.a;
            float _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[0];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[1];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[2];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006;
            _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4;
            float3 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D, _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D, _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D, _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4, _Property_056e23a91826476486a6830c67445954_Out_0_Float, _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2, _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2, _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2, _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2, _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float);
            UnityTexture2D _Property_baad51ce545849088095f56173420144_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_1);
            UnityTexture2D _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_1);
            UnityTexture2D _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_1);
            float4 _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_1) : _Color_Tint_1;
            float _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float = _Normal_Scale_1;
            float2 _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2 = _Metallic_Remapping_1;
            float2 _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2 = _AO_Remapping_1;
            float2 _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2 = _Smoothness_Remapping_1;
            float2 _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2 = _Tiling_1;
            float2 _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2 = _Offset_1;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_513ffd3dead74b5ca5456e2100244bdf;
            _LitLayer_513ffd3dead74b5ca5456e2100244bdf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4;
            float3 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_baad51ce545849088095f56173420144_Out_0_Texture2D, _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D, _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D, _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4, _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float, _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2, _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2, _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2, _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2, _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_513ffd3dead74b5ca5456e2100244bdf, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float);
            float4 _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4);
            UnityTexture2D _Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_2);
            UnityTexture2D _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_2);
            UnityTexture2D _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_2);
            float4 _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_2) : _Color_Tint_2;
            float _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float = _Normal_Scale_2;
            float2 _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2 = _Metallic_Remapping_2;
            float2 _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2 = _AO_Remapping_2;
            float2 _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2 = _Smoothness_Remapping_2;
            float2 _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2 = _Tiling_2;
            float2 _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2 = _Offset_2;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f;
            _LitLayer_1f2c81a1ccd84db58f59135fdd91517f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4;
            float3 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D, _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D, _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D, _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4, _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float, _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2, _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2, _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2, _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2, _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1f2c81a1ccd84db58f59135fdd91517f, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float);
            UnityTexture2D _Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_3);
            UnityTexture2D _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_3);
            UnityTexture2D _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_3);
            float4 _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_3) : _Color_Tint_3;
            float _Property_124a23e85f834643a4862644910febf0_Out_0_Float = _Normal_Scale_3;
            float2 _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2 = _Metallic_Remapping_3;
            float2 _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2 = _AO_Remapping_3;
            float2 _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2 = _Smoothness_Remapping_3;
            float2 _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2 = _Tiling_3;
            float2 _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2 = _Offset_3;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5255baca24fd4912bc05918766c7d91e;
            _LitLayer_5255baca24fd4912bc05918766c7d91e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4;
            float3 _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D, _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D, _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D, _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4, _Property_124a23e85f834643a4862644910febf0_Out_0_Float, _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2, _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2, _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2, _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2, _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5255baca24fd4912bc05918766c7d91e, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float);
            float4 _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4);
            float4 _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4;
            Unity_Add_float4(_Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4, _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4);
            UnityTexture2D _Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_4);
            UnityTexture2D _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_4);
            UnityTexture2D _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_4);
            float4 _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_4) : _Color_Tint_4;
            float _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float = _Normal_Scale_4;
            float2 _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2 = _Metallic_Remapping_4;
            float2 _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2 = _AO_Remapping_4;
            float2 _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2 = _Smoothness_Remapping_4;
            float2 _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2 = _Tiling_4;
            float2 _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2 = _Offset_4;
            UnityTexture2D _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_1);
            float4 _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.tex, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.samplerstate, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_R_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.r;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_G_5_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.g;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_B_6_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.b;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_A_7_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.a;
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[0];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[1];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[2];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_ff97f48270044dceb903e3d916a4bb9b;
            _LitLayer_ff97f48270044dceb903e3d916a4bb9b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4;
            float3 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D, _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D, _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D, _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4, _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float, _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2, _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2, _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2, _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2, _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_ff97f48270044dceb903e3d916a4bb9b, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float);
            UnityTexture2D _Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_5);
            UnityTexture2D _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_5);
            UnityTexture2D _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_5);
            float4 _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_5) : _Color_Tint_5;
            float _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float = _Normal_Scale_5;
            float2 _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2 = _Metallic_Remapping_5;
            float2 _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2 = _AO_Remapping_5;
            float2 _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2 = _Smoothness_Remapping_5;
            float2 _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2 = _Tiling_5;
            float2 _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2 = _Offset_5;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_f897f9464d51426ab77471c3030dc83e;
            _LitLayer_f897f9464d51426ab77471c3030dc83e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4;
            float3 _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D, _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D, _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D, _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4, _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float, _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2, _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2, _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2, _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2, _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_f897f9464d51426ab77471c3030dc83e, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float);
            float4 _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4);
            UnityTexture2D _Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_6);
            UnityTexture2D _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_6);
            UnityTexture2D _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_6);
            float4 _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_6) : _Color_Tint_6;
            float _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float = _Normal_Scale_6;
            float2 _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2 = _Metallic_Remapping_6;
            float2 _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2 = _AO_Remapping_6;
            float2 _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2 = _Smoothness_Remapping_6;
            float2 _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2 = _Tiling_6;
            float2 _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2 = _Offset_6;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1d3814484b5f4ec78dd6ead739661d68;
            _LitLayer_1d3814484b5f4ec78dd6ead739661d68.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4;
            float3 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D, _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D, _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D, _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4, _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float, _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2, _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2, _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2, _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2, _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1d3814484b5f4ec78dd6ead739661d68, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float);
            UnityTexture2D _Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_7);
            UnityTexture2D _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_7);
            UnityTexture2D _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_7);
            float4 _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_7) : _Color_Tint_7;
            float _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float = _Normal_Scale_7;
            float2 _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2 = _Metallic_Remapping_7;
            float2 _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2 = _AO_Remapping_7;
            float2 _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2 = _Smoothness_Remapping_7;
            float2 _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2 = _Tiling_7;
            float2 _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2 = _Offset_7;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5e7d07e7199c46afa246f8f900df65e1;
            _LitLayer_5e7d07e7199c46afa246f8f900df65e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4;
            float3 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D, _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D, _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D, _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4, _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float, _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2, _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2, _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2, _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2, _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5e7d07e7199c46afa246f8f900df65e1, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float);
            float4 _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4);
            float4 _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4;
            Unity_Add_float4(_Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4);
            float4 _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4;
            Unity_Add_float4(_Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4, _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4);
            float _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float);
            float _Add_3995f6f6129448b09302fe5492790629_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float);
            float _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float;
            Unity_Add_float(_Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float, _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float);
            float _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float);
            float _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float);
            float _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float;
            Unity_Add_float(_Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float);
            float _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float;
            Unity_Add_float(_Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float);
            float4 _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4;
            Unity_Divide_float4(_Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxxx), _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4);
            float _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float, _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float);
            float _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float);
            float _Add_1d7868509d274829a85cfe104008340f_Out_2_Float;
            Unity_Add_float(_Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float, _Add_1d7868509d274829a85cfe104008340f_Out_2_Float);
            float _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float, _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float);
            float _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float);
            float _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float;
            Unity_Add_float(_Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float);
            float _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float;
            Unity_Add_float(_Add_1d7868509d274829a85cfe104008340f_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float, _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float);
            float _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            Unity_Divide_float(_Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float);
            float _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float);
            float _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float);
            float _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float;
            Unity_Add_float(_Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float, _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float);
            float _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float);
            float _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float);
            float _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float;
            Unity_Add_float(_Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float);
            float _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float;
            Unity_Add_float(_Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float, _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float);
            float _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            Unity_Divide_float(_Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float);
            float3 _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3);
            float3 _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3);
            float3 _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3;
            Unity_Add_float3(_Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3, _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3);
            float3 _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3);
            float3 _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3);
            float3 _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3;
            Unity_Add_float3(_Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3);
            float3 _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3;
            Unity_Add_float3(_Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3, _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3);
            float3 _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3;
            Unity_Divide_float3(_Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxx), _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3);
            float3 _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            Unity_Normalize_float3(_Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3, _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3);
            float _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float);
            float _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float);
            float _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float;
            Unity_Add_float(_Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float, _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float);
            float _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float);
            float _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float);
            float _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float;
            Unity_Add_float(_Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float);
            float _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float;
            Unity_Add_float(_Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float, _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float);
            float _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            Unity_Divide_float(_Add_7660ed0f30444cdda982202340cff83d_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float);
            surface.BaseColor = (_Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4.xyz);
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            surface.Occlusion = _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            surface.NormalTS = _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            surface.Metallic = _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
            normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
            fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "GBufferDXR"
            Tags
            {
                "LightMode" = "GBufferDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma multi_compile _ MINIMAL_GBUFFER
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD1
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_GBUFFER
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Deferred/RaytracingIntersectonGBuffer.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/StandardLit/StandardLit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 TangentSpaceNormal;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Any_float4(float4 In, out float Out)
        {
            Out = any(In);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float
        {
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(UnityTexture2D _Albedo, UnityTexture2D _Normals, UnityTexture2D _Mask, float4 _Color_Tint, float _Normal_Scale, float2 _Metallic_Remapping, float2 _AO_Remapping, float2 _Smoothness_Remapping, float2 _Tiling, float2 _Offset, float _Layer_Weight, UnitySamplerState Sampler, Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float IN, out float4 Base_Color_1, out float3 Normals_2, out float Metallic_3, out float AO_4, out float Smoothness_5)
        {
        float4 _Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4 = _Color_Tint;
        UnityTexture2D _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D = _Albedo;
        float2 _Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2 = IN.AbsoluteWorldSpacePosition.xz;
        float2 _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2 = _Tiling;
        float2 _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2;
        Unity_Divide_float2(_Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2, _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2, _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2);
        float2 _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2 = _Offset;
        float2 _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2;
        Unity_Add_float2(_Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2, _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2, _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2);
        UnitySamplerState _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState = Sampler;
        float4 _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_R_4_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.r;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_G_5_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.g;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_B_6_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.b;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.a;
        float4 _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4, _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4);
        float _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float = _Layer_Weight;
        float4 _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxxx), _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4);
        UnityTexture2D _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D = _Normals;
        float4 _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4);
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_R_4_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.r;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_G_5_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.g;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_B_6_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.b;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_A_7_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.a;
        float _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float = _Normal_Scale;
        float3 _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.xyz), _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float, _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3);
        float3 _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxx), _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3);
        UnityTexture2D _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D = _Mask;
        float4 _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.r;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.g;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_B_6_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.b;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.a;
        float2 _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2 = _Metallic_Remapping;
        float _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float, float2 (0, 1), _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2, _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float);
        float _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        Unity_Multiply_float_float(_Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float);
        float2 _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2 = _AO_Remapping;
        float _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float, float2 (0, 1), _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2, _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float);
        float _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Unity_Multiply_float_float(_Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float);
        float _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean;
        Unity_Any_float4(_SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4, _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean);
        float _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float;
        Unity_Branch_float(_Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean, _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float, _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float);
        float2 _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2 = _Smoothness_Remapping;
        float _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float;
        Unity_Remap_float(_Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float, float2 (0, 1), _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2, _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float);
        float _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        Unity_Multiply_float_float(_Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float);
        Base_Color_1 = _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Normals_2 = _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Metallic_3 = _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        AO_4 = _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Smoothness_5 = _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_0);
            UnityTexture2D _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_0);
            UnityTexture2D _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_0);
            float4 _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_0) : _Color_Tint_0;
            float _Property_056e23a91826476486a6830c67445954_Out_0_Float = _Normal_Scale_0;
            float2 _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2 = _Metallic_Remapping_0;
            float2 _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2 = _AO_Remapping_0;
            float2 _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2 = _Smoothness_Remapping_0;
            float2 _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2 = _Tiling_0;
            float2 _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2 = _Offset_0;
            UnityTexture2D _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_0);
            float4 _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.tex, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.samplerstate, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_R_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.r;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_G_5_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.g;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_B_6_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.b;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_A_7_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.a;
            float _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[0];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[1];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[2];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006;
            _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4;
            float3 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D, _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D, _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D, _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4, _Property_056e23a91826476486a6830c67445954_Out_0_Float, _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2, _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2, _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2, _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2, _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float);
            UnityTexture2D _Property_baad51ce545849088095f56173420144_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_1);
            UnityTexture2D _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_1);
            UnityTexture2D _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_1);
            float4 _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_1) : _Color_Tint_1;
            float _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float = _Normal_Scale_1;
            float2 _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2 = _Metallic_Remapping_1;
            float2 _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2 = _AO_Remapping_1;
            float2 _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2 = _Smoothness_Remapping_1;
            float2 _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2 = _Tiling_1;
            float2 _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2 = _Offset_1;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_513ffd3dead74b5ca5456e2100244bdf;
            _LitLayer_513ffd3dead74b5ca5456e2100244bdf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4;
            float3 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_baad51ce545849088095f56173420144_Out_0_Texture2D, _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D, _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D, _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4, _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float, _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2, _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2, _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2, _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2, _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_513ffd3dead74b5ca5456e2100244bdf, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float);
            float4 _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4);
            UnityTexture2D _Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_2);
            UnityTexture2D _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_2);
            UnityTexture2D _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_2);
            float4 _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_2) : _Color_Tint_2;
            float _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float = _Normal_Scale_2;
            float2 _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2 = _Metallic_Remapping_2;
            float2 _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2 = _AO_Remapping_2;
            float2 _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2 = _Smoothness_Remapping_2;
            float2 _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2 = _Tiling_2;
            float2 _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2 = _Offset_2;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f;
            _LitLayer_1f2c81a1ccd84db58f59135fdd91517f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4;
            float3 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D, _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D, _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D, _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4, _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float, _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2, _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2, _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2, _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2, _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1f2c81a1ccd84db58f59135fdd91517f, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float);
            UnityTexture2D _Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_3);
            UnityTexture2D _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_3);
            UnityTexture2D _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_3);
            float4 _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_3) : _Color_Tint_3;
            float _Property_124a23e85f834643a4862644910febf0_Out_0_Float = _Normal_Scale_3;
            float2 _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2 = _Metallic_Remapping_3;
            float2 _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2 = _AO_Remapping_3;
            float2 _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2 = _Smoothness_Remapping_3;
            float2 _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2 = _Tiling_3;
            float2 _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2 = _Offset_3;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5255baca24fd4912bc05918766c7d91e;
            _LitLayer_5255baca24fd4912bc05918766c7d91e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4;
            float3 _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D, _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D, _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D, _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4, _Property_124a23e85f834643a4862644910febf0_Out_0_Float, _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2, _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2, _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2, _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2, _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5255baca24fd4912bc05918766c7d91e, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float);
            float4 _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4);
            float4 _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4;
            Unity_Add_float4(_Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4, _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4);
            UnityTexture2D _Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_4);
            UnityTexture2D _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_4);
            UnityTexture2D _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_4);
            float4 _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_4) : _Color_Tint_4;
            float _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float = _Normal_Scale_4;
            float2 _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2 = _Metallic_Remapping_4;
            float2 _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2 = _AO_Remapping_4;
            float2 _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2 = _Smoothness_Remapping_4;
            float2 _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2 = _Tiling_4;
            float2 _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2 = _Offset_4;
            UnityTexture2D _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_1);
            float4 _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.tex, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.samplerstate, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_R_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.r;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_G_5_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.g;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_B_6_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.b;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_A_7_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.a;
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[0];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[1];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[2];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_ff97f48270044dceb903e3d916a4bb9b;
            _LitLayer_ff97f48270044dceb903e3d916a4bb9b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4;
            float3 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D, _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D, _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D, _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4, _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float, _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2, _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2, _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2, _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2, _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_ff97f48270044dceb903e3d916a4bb9b, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float);
            UnityTexture2D _Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_5);
            UnityTexture2D _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_5);
            UnityTexture2D _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_5);
            float4 _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_5) : _Color_Tint_5;
            float _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float = _Normal_Scale_5;
            float2 _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2 = _Metallic_Remapping_5;
            float2 _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2 = _AO_Remapping_5;
            float2 _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2 = _Smoothness_Remapping_5;
            float2 _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2 = _Tiling_5;
            float2 _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2 = _Offset_5;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_f897f9464d51426ab77471c3030dc83e;
            _LitLayer_f897f9464d51426ab77471c3030dc83e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4;
            float3 _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D, _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D, _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D, _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4, _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float, _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2, _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2, _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2, _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2, _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_f897f9464d51426ab77471c3030dc83e, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float);
            float4 _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4);
            UnityTexture2D _Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_6);
            UnityTexture2D _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_6);
            UnityTexture2D _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_6);
            float4 _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_6) : _Color_Tint_6;
            float _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float = _Normal_Scale_6;
            float2 _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2 = _Metallic_Remapping_6;
            float2 _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2 = _AO_Remapping_6;
            float2 _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2 = _Smoothness_Remapping_6;
            float2 _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2 = _Tiling_6;
            float2 _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2 = _Offset_6;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1d3814484b5f4ec78dd6ead739661d68;
            _LitLayer_1d3814484b5f4ec78dd6ead739661d68.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4;
            float3 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D, _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D, _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D, _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4, _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float, _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2, _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2, _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2, _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2, _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1d3814484b5f4ec78dd6ead739661d68, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float);
            UnityTexture2D _Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_7);
            UnityTexture2D _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_7);
            UnityTexture2D _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_7);
            float4 _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_7) : _Color_Tint_7;
            float _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float = _Normal_Scale_7;
            float2 _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2 = _Metallic_Remapping_7;
            float2 _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2 = _AO_Remapping_7;
            float2 _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2 = _Smoothness_Remapping_7;
            float2 _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2 = _Tiling_7;
            float2 _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2 = _Offset_7;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5e7d07e7199c46afa246f8f900df65e1;
            _LitLayer_5e7d07e7199c46afa246f8f900df65e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4;
            float3 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D, _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D, _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D, _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4, _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float, _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2, _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2, _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2, _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2, _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5e7d07e7199c46afa246f8f900df65e1, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float);
            float4 _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4);
            float4 _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4;
            Unity_Add_float4(_Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4);
            float4 _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4;
            Unity_Add_float4(_Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4, _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4);
            float _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float);
            float _Add_3995f6f6129448b09302fe5492790629_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float);
            float _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float;
            Unity_Add_float(_Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float, _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float);
            float _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float);
            float _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float);
            float _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float;
            Unity_Add_float(_Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float);
            float _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float;
            Unity_Add_float(_Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float);
            float4 _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4;
            Unity_Divide_float4(_Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxxx), _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4);
            float _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float, _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float);
            float _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float);
            float _Add_1d7868509d274829a85cfe104008340f_Out_2_Float;
            Unity_Add_float(_Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float, _Add_1d7868509d274829a85cfe104008340f_Out_2_Float);
            float _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float, _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float);
            float _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float);
            float _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float;
            Unity_Add_float(_Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float);
            float _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float;
            Unity_Add_float(_Add_1d7868509d274829a85cfe104008340f_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float, _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float);
            float _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            Unity_Divide_float(_Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float);
            float _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float);
            float _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float);
            float _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float;
            Unity_Add_float(_Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float, _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float);
            float _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float);
            float _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float);
            float _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float;
            Unity_Add_float(_Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float);
            float _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float;
            Unity_Add_float(_Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float, _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float);
            float _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            Unity_Divide_float(_Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float);
            float3 _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3);
            float3 _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3);
            float3 _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3;
            Unity_Add_float3(_Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3, _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3);
            float3 _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3);
            float3 _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3);
            float3 _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3;
            Unity_Add_float3(_Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3);
            float3 _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3;
            Unity_Add_float3(_Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3, _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3);
            float3 _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3;
            Unity_Divide_float3(_Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxx), _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3);
            float3 _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            Unity_Normalize_float3(_Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3, _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3);
            float _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float);
            float _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float);
            float _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float;
            Unity_Add_float(_Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float, _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float);
            float _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float);
            float _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float);
            float _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float;
            Unity_Add_float(_Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float);
            float _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float;
            Unity_Add_float(_Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float, _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float);
            float _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            Unity_Divide_float(_Add_7660ed0f30444cdda982202340cff83d_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float);
            surface.BaseColor = (_Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4.xyz);
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            surface.Occlusion = _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            surface.NormalTS = _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            surface.Metallic = _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
            normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
            fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "DebugDXR"
            Tags
            {
                "LightMode" = "DebugDXR"
            }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        	// GraphIncludes: <None>
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRayTracingDebug.hlsl"
        
            ENDHLSL
        }
        Pass
        {
            Name "PathTracingDXR"
            Tags
            {
                "LightMode" = "PathTracingDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD1
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_PATH_TRACING
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define HAS_LIGHTLOOP 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _Splatmap_0_TexelSize;
        float4 _Splatmap_1_TexelSize;
        float4 _Albedo_0_TexelSize;
        float4 _Normals_0_TexelSize;
        float4 _Mask_0_TexelSize;
        float2 _Tiling_0;
        float2 _Offset_0;
        float2 _Metallic_Remapping_0;
        float2 _AO_Remapping_0;
        float2 _Smoothness_Remapping_0;
        float _Normal_Scale_0;
        float4 _Color_Tint_0;
        float4 _Albedo_1_TexelSize;
        float4 _Color_Tint_1;
        float4 _Normals_1_TexelSize;
        float _Normal_Scale_1;
        float4 _Mask_1_TexelSize;
        float2 _Metallic_Remapping_1;
        float2 _AO_Remapping_1;
        float2 _Smoothness_Remapping_1;
        float2 _Tiling_1;
        float2 _Offset_1;
        float4 _Albedo_2_TexelSize;
        float4 _Color_Tint_2;
        float4 _Normals_2_TexelSize;
        float _Normal_Scale_2;
        float4 _Mask_2_TexelSize;
        float2 _Metallic_Remapping_2;
        float2 _AO_Remapping_2;
        float2 _Smoothness_Remapping_2;
        float2 _Tiling_2;
        float2 _Offset_2;
        float4 _Albedo_3_TexelSize;
        float4 _Color_Tint_3;
        float4 _Normals_3_TexelSize;
        float _Normal_Scale_3;
        float4 _Mask_3_TexelSize;
        float2 _Metallic_Remapping_3;
        float2 _AO_Remapping_3;
        float2 _Smoothness_Remapping_3;
        float2 _Tiling_3;
        float2 _Offset_3;
        float4 _Albedo_4_TexelSize;
        float4 _Color_Tint_4;
        float4 _Normals_4_TexelSize;
        float _Normal_Scale_4;
        float4 _Mask_4_TexelSize;
        float2 _Metallic_Remapping_4;
        float2 _AO_Remapping_4;
        float2 _Smoothness_Remapping_4;
        float2 _Tiling_4;
        float2 _Offset_4;
        float4 _Albedo_5_TexelSize;
        float4 _Color_Tint_5;
        float4 _Normals_5_TexelSize;
        float _Normal_Scale_5;
        float4 _Mask_5_TexelSize;
        float2 _Metallic_Remapping_5;
        float2 _AO_Remapping_5;
        float2 _Smoothness_Remapping_5;
        float2 _Tiling_5;
        float2 _Offset_5;
        float4 _Albedo_6_TexelSize;
        float4 _Color_Tint_6;
        float4 _Normals_6_TexelSize;
        float _Normal_Scale_6;
        float4 _Mask_6_TexelSize;
        float2 _Metallic_Remapping_6;
        float2 _AO_Remapping_6;
        float2 _Smoothness_Remapping_6;
        float2 _Tiling_6;
        float2 _Offset_6;
        float4 _Albedo_7_TexelSize;
        float4 _Color_Tint_7;
        float4 _Normals_7_TexelSize;
        float _Normal_Scale_7;
        float4 _Mask_7_TexelSize;
        float2 _Metallic_Remapping_7;
        float2 _AO_Remapping_7;
        float2 _Smoothness_Remapping_7;
        float2 _Tiling_7;
        float2 _Offset_7;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso2);
        TEXTURE2D(_Splatmap_0);
        SAMPLER(sampler_Splatmap_0);
        TEXTURE2D(_Splatmap_1);
        SAMPLER(sampler_Splatmap_1);
        TEXTURE2D(_Albedo_0);
        SAMPLER(sampler_Albedo_0);
        TEXTURE2D(_Normals_0);
        SAMPLER(sampler_Normals_0);
        TEXTURE2D(_Mask_0);
        SAMPLER(sampler_Mask_0);
        TEXTURE2D(_Albedo_1);
        SAMPLER(sampler_Albedo_1);
        TEXTURE2D(_Normals_1);
        SAMPLER(sampler_Normals_1);
        TEXTURE2D(_Mask_1);
        SAMPLER(sampler_Mask_1);
        TEXTURE2D(_Albedo_2);
        SAMPLER(sampler_Albedo_2);
        TEXTURE2D(_Normals_2);
        SAMPLER(sampler_Normals_2);
        TEXTURE2D(_Mask_2);
        SAMPLER(sampler_Mask_2);
        TEXTURE2D(_Albedo_3);
        SAMPLER(sampler_Albedo_3);
        TEXTURE2D(_Normals_3);
        SAMPLER(sampler_Normals_3);
        TEXTURE2D(_Mask_3);
        SAMPLER(sampler_Mask_3);
        TEXTURE2D(_Albedo_4);
        SAMPLER(sampler_Albedo_4);
        TEXTURE2D(_Normals_4);
        SAMPLER(sampler_Normals_4);
        TEXTURE2D(_Mask_4);
        SAMPLER(sampler_Mask_4);
        TEXTURE2D(_Albedo_5);
        SAMPLER(sampler_Albedo_5);
        TEXTURE2D(_Normals_5);
        SAMPLER(sampler_Normals_5);
        TEXTURE2D(_Mask_5);
        SAMPLER(sampler_Mask_5);
        TEXTURE2D(_Albedo_6);
        SAMPLER(sampler_Albedo_6);
        TEXTURE2D(_Normals_6);
        SAMPLER(sampler_Normals_6);
        TEXTURE2D(_Mask_6);
        SAMPLER(sampler_Mask_6);
        TEXTURE2D(_Albedo_7);
        SAMPLER(sampler_Albedo_7);
        TEXTURE2D(_Normals_7);
        SAMPLER(sampler_Normals_7);
        TEXTURE2D(_Mask_7);
        SAMPLER(sampler_Mask_7);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitPathTracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 TangentSpaceNormal;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Any_float4(float4 In, out float Out)
        {
            Out = any(In);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float
        {
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(UnityTexture2D _Albedo, UnityTexture2D _Normals, UnityTexture2D _Mask, float4 _Color_Tint, float _Normal_Scale, float2 _Metallic_Remapping, float2 _AO_Remapping, float2 _Smoothness_Remapping, float2 _Tiling, float2 _Offset, float _Layer_Weight, UnitySamplerState Sampler, Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float IN, out float4 Base_Color_1, out float3 Normals_2, out float Metallic_3, out float AO_4, out float Smoothness_5)
        {
        float4 _Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4 = _Color_Tint;
        UnityTexture2D _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D = _Albedo;
        float2 _Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2 = IN.AbsoluteWorldSpacePosition.xz;
        float2 _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2 = _Tiling;
        float2 _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2;
        Unity_Divide_float2(_Swizzle_4d928d3d44934b56b42801a8796f40a8_Out_1_Vector2, _Property_4cee818f049244b28e20134afa951220_Out_0_Vector2, _Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2);
        float2 _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2 = _Offset;
        float2 _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2;
        Unity_Add_float2(_Divide_c032b0e28d7247a7914a15472b7c9952_Out_2_Vector2, _Property_116919273a974354bd87f546b62fdb39_Out_0_Vector2, _Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2);
        UnitySamplerState _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState = Sampler;
        float4 _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_02a1a33216434d83a03a8c3e5412d458_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_R_4_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.r;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_G_5_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.g;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_B_6_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.b;
        float _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float = _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4.a;
        float4 _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Property_86531afe67f04c35b37bf2e82c3d8825_Out_0_Vector4, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_RGBA_0_Vector4, _Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4);
        float _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float = _Layer_Weight;
        float4 _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Unity_Multiply_float4_float4(_Multiply_985da4654c084e6580ba5c365625e8b0_Out_2_Vector4, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxxx), _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4);
        UnityTexture2D _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D = _Normals;
        float4 _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_1d154c8be4b4461da03af1a25b048b06_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4);
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_R_4_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.r;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_G_5_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.g;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_B_6_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.b;
        float _SampleTexture2D_12149c12b07548baba3334e62282508b_A_7_Float = _SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.a;
        float _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float = _Normal_Scale;
        float3 _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_12149c12b07548baba3334e62282508b_RGBA_0_Vector4.xyz), _Property_c3ca1e615f3d49e08be39d946c94def7_Out_0_Float, _NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3);
        float3 _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_NormalStrength_da6c975257af43758ca7cf23dcd55fc5_Out_2_Vector3, (_Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float.xxx), _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3);
        UnityTexture2D _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D = _Mask;
        float4 _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.tex, _Property_4eedd13fab734f75a0f1657afa902607_Out_0_SamplerState.samplerstate, _Property_7df0ea5f5a9b40a8b61caac67fc385a7_Out_0_Texture2D.GetTransformedUV(_Add_cfa63cdbd193425997ff0dbc5bdb17e0_Out_2_Vector2) );
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.r;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.g;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_B_6_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.b;
        float _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float = _SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4.a;
        float2 _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2 = _Metallic_Remapping;
        float _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_R_4_Float, float2 (0, 1), _Property_e713ea24f2104b09b19ece3df7da1caa_Out_0_Vector2, _Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float);
        float _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        Unity_Multiply_float_float(_Remap_2be35abd84fd460990b7ad4de8fd6143_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float);
        float2 _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2 = _AO_Remapping;
        float _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float;
        Unity_Remap_float(_SampleTexture2D_70efe55ade0948c998c219362e77344f_G_5_Float, float2 (0, 1), _Property_fe433220ca6c4dfe97e010582e844267_Out_0_Vector2, _Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float);
        float _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Unity_Multiply_float_float(_Remap_0f4b7146240f428d9fdde13c391e81b0_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float);
        float _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean;
        Unity_Any_float4(_SampleTexture2D_70efe55ade0948c998c219362e77344f_RGBA_0_Vector4, _Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean);
        float _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float;
        Unity_Branch_float(_Any_9cc520ef1b6742258f6c182160cb0c21_Out_1_Boolean, _SampleTexture2D_70efe55ade0948c998c219362e77344f_A_7_Float, _SampleTexture2D_4012df69197c4629bdf80912a2c3c1d6_A_7_Float, _Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float);
        float2 _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2 = _Smoothness_Remapping;
        float _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float;
        Unity_Remap_float(_Branch_69315f2b6be24f67b0ddcb046059fa94_Out_3_Float, float2 (0, 1), _Property_52e78cdc50954cb381ae0bde567b0377_Out_0_Vector2, _Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float);
        float _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        Unity_Multiply_float_float(_Remap_9c2823bac09e40bab3c8884d49885cd9_Out_3_Float, _Property_62424eb7e5b8444f83e7938bbf5691f9_Out_0_Float, _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float);
        Base_Color_1 = _Multiply_7cd1c502e3954781b139c75e665b67de_Out_2_Vector4;
        Normals_2 = _Multiply_40f11b5e6fca47ef9a6aac6e65e724b2_Out_2_Vector3;
        Metallic_3 = _Multiply_878dab5d286e4ef79953dd94a42779f9_Out_2_Float;
        AO_4 = _Multiply_8fc5d13cd5b4455596307e236e0a51f4_Out_2_Float;
        Smoothness_5 = _Multiply_11bd47fe524e44c6a174621dd3b7c7fa_Out_2_Float;
        }
        
        void Unity_Add_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A / B;
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_0);
            UnityTexture2D _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_0);
            UnityTexture2D _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_0);
            float4 _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_0) : _Color_Tint_0;
            float _Property_056e23a91826476486a6830c67445954_Out_0_Float = _Normal_Scale_0;
            float2 _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2 = _Metallic_Remapping_0;
            float2 _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2 = _AO_Remapping_0;
            float2 _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2 = _Smoothness_Remapping_0;
            float2 _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2 = _Tiling_0;
            float2 _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2 = _Offset_0;
            UnityTexture2D _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_0);
            float4 _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.tex, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.samplerstate, _Property_f89d7c76a27444bdb56fbc47e28d9d8b_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_R_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.r;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_G_5_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.g;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_B_6_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.b;
            float _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_A_7_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4.a;
            float _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[0];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[1];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[2];
            float _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float = _SampleTexture2D_91e5b8ceffbc471a9a99d935018d9505_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006;
            _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4;
            float3 _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float;
            float _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_235ec86595a2425ea5db0e310c139e55_Out_0_Texture2D, _Property_0778ffa7eb5546f8b81d997d31fa63c9_Out_0_Texture2D, _Property_4b57c5d9ca244051a1b7ad2cccd0dea2_Out_0_Texture2D, _Property_8268ce8f11614cdc9c15e5dae395b6a8_Out_0_Vector4, _Property_056e23a91826476486a6830c67445954_Out_0_Float, _Property_9af8bc8e09a540aab1aee536965ed7ce_Out_0_Vector2, _Property_3e71257eefa54f46bf2848610932634b_Out_0_Vector2, _Property_a136edcd73a44be7be62e703b7f7a364_Out_0_Vector2, _Property_750eaaa1df3146eead1e216f4d478df3_Out_0_Vector2, _Property_24dd29f35612499080eb207ba5584d56_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float);
            UnityTexture2D _Property_baad51ce545849088095f56173420144_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_1);
            UnityTexture2D _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_1);
            UnityTexture2D _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_1);
            float4 _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_1) : _Color_Tint_1;
            float _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float = _Normal_Scale_1;
            float2 _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2 = _Metallic_Remapping_1;
            float2 _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2 = _AO_Remapping_1;
            float2 _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2 = _Smoothness_Remapping_1;
            float2 _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2 = _Tiling_1;
            float2 _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2 = _Offset_1;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_513ffd3dead74b5ca5456e2100244bdf;
            _LitLayer_513ffd3dead74b5ca5456e2100244bdf.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4;
            float3 _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float;
            float _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_baad51ce545849088095f56173420144_Out_0_Texture2D, _Property_e2d45ea35f1c42709175e836ef6a24bd_Out_0_Texture2D, _Property_4e1b38d2b20a4dd096df432e79f7bc38_Out_0_Texture2D, _Property_c660f60c808d44d48613f4926c739b56_Out_0_Vector4, _Property_052b4d3ddcd34e9d8fc2fe96744b093f_Out_0_Float, _Property_38e626edfb5044a6b8c1acfade63026f_Out_0_Vector2, _Property_4302bdae8804403493e8eb8c8d3479fe_Out_0_Vector2, _Property_8cedb3600c5740eebaa121416acc1d5f_Out_0_Vector2, _Property_eafd68e3c83744ec828a07abdfb583b3_Out_0_Vector2, _Property_5ee38bc999be4f159e4b7428eebf4e91_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_513ffd3dead74b5ca5456e2100244bdf, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float);
            float4 _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_BaseColor_1_Vector4, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_BaseColor_1_Vector4, _Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4);
            UnityTexture2D _Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_2);
            UnityTexture2D _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_2);
            UnityTexture2D _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_2);
            float4 _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_2) : _Color_Tint_2;
            float _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float = _Normal_Scale_2;
            float2 _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2 = _Metallic_Remapping_2;
            float2 _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2 = _AO_Remapping_2;
            float2 _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2 = _Smoothness_Remapping_2;
            float2 _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2 = _Tiling_2;
            float2 _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2 = _Offset_2;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f;
            _LitLayer_1f2c81a1ccd84db58f59135fdd91517f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4;
            float3 _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float;
            float _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_ac7024fca6894391abcbce913a092d05_Out_0_Texture2D, _Property_5e6cc1547b07449d939bd89b23e32d05_Out_0_Texture2D, _Property_6e2a3731387246ddb0304811d3fa92b0_Out_0_Texture2D, _Property_ead784ae59444848bda770a8155dae7e_Out_0_Vector4, _Property_38582eaf866f4376a2c782ce2929308b_Out_0_Float, _Property_c734dec7e0fa4bc382cf5afd7d1356ad_Out_0_Vector2, _Property_ea6e982a181740a7a260a8441de13b82_Out_0_Vector2, _Property_5752ec3408a6409894b68f828f5bb68c_Out_0_Vector2, _Property_3bc1fd21eba848da8c429925ef8a38c5_Out_0_Vector2, _Property_7695484beedb4d98a7fc37d509ce5800_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1f2c81a1ccd84db58f59135fdd91517f, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float);
            UnityTexture2D _Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_3);
            UnityTexture2D _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_3);
            UnityTexture2D _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_3);
            float4 _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_3) : _Color_Tint_3;
            float _Property_124a23e85f834643a4862644910febf0_Out_0_Float = _Normal_Scale_3;
            float2 _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2 = _Metallic_Remapping_3;
            float2 _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2 = _AO_Remapping_3;
            float2 _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2 = _Smoothness_Remapping_3;
            float2 _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2 = _Tiling_3;
            float2 _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2 = _Offset_3;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5255baca24fd4912bc05918766c7d91e;
            _LitLayer_5255baca24fd4912bc05918766c7d91e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4;
            float3 _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float;
            float _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_68d202dc05f84b50878abcef174dc23f_Out_0_Texture2D, _Property_9c9cc3e8ffc2498f8658267c291228f7_Out_0_Texture2D, _Property_8a945fb1123d4ccc8a9205d7076daae0_Out_0_Texture2D, _Property_825d3e260e31490480dc34214edb3b4d_Out_0_Vector4, _Property_124a23e85f834643a4862644910febf0_Out_0_Float, _Property_1ad0229c8b804462a81ed4aa1c45718c_Out_0_Vector2, _Property_945d4c7921054d9787a024af4a3c4373_Out_0_Vector2, _Property_a4679f19e57946439fbc1b763afbf448_Out_0_Vector2, _Property_49c5e3b53e384105977f5b432ffda2db_Out_0_Vector2, _Property_e96d0026ad9748c589f5271cb379cbda_Out_0_Vector2, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5255baca24fd4912bc05918766c7d91e, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float);
            float4 _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_BaseColor_1_Vector4, _LitLayer_5255baca24fd4912bc05918766c7d91e_BaseColor_1_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4);
            float4 _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4;
            Unity_Add_float4(_Add_29b76f68c76f47ceaa311bd1dc8b2ef0_Out_2_Vector4, _Add_54849785f5f54a92a68ad042cdddfdac_Out_2_Vector4, _Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4);
            UnityTexture2D _Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_4);
            UnityTexture2D _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_4);
            UnityTexture2D _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_4);
            float4 _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_4) : _Color_Tint_4;
            float _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float = _Normal_Scale_4;
            float2 _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2 = _Metallic_Remapping_4;
            float2 _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2 = _AO_Remapping_4;
            float2 _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2 = _Smoothness_Remapping_4;
            float2 _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2 = _Tiling_4;
            float2 _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2 = _Offset_4;
            UnityTexture2D _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Splatmap_1);
            float4 _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.tex, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.samplerstate, _Property_a7f23674ae5b45eaad63378166b8b783_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_R_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.r;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_G_5_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.g;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_B_6_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.b;
            float _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_A_7_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4.a;
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[0];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[1];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[2];
            float _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float = _SampleTexture2D_b3200bf4c24f40bcb76e6e06c25ae652_RGBA_0_Vector4[3];
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_ff97f48270044dceb903e3d916a4bb9b;
            _LitLayer_ff97f48270044dceb903e3d916a4bb9b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4;
            float3 _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float;
            float _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_fa17c48d1b8d4cd994e71bd6c7cee264_Out_0_Texture2D, _Property_4f8076d21e0644818d731c28f70d867c_Out_0_Texture2D, _Property_a105b9af894741a582d8824953d55e24_Out_0_Texture2D, _Property_eb0b658c283f41a6beca6568bbbc6ae1_Out_0_Vector4, _Property_1fec183db22e4cf6bbd7abdf61abcfeb_Out_0_Float, _Property_a5a2c9accd7a488dbe8e439a89768d12_Out_0_Vector2, _Property_eb7744913e21467abd3aa13bc005e5db_Out_0_Vector2, _Property_3e692c7fc5274fc2851f8e0899583d8b_Out_0_Vector2, _Property_9a68b137f6c44b96b515a2298adfcf98_Out_0_Vector2, _Property_3c3fb9fce7234c678c5bffeaf087c8d8_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_ff97f48270044dceb903e3d916a4bb9b, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float);
            UnityTexture2D _Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_5);
            UnityTexture2D _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_5);
            UnityTexture2D _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_5);
            float4 _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_5) : _Color_Tint_5;
            float _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float = _Normal_Scale_5;
            float2 _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2 = _Metallic_Remapping_5;
            float2 _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2 = _AO_Remapping_5;
            float2 _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2 = _Smoothness_Remapping_5;
            float2 _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2 = _Tiling_5;
            float2 _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2 = _Offset_5;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_f897f9464d51426ab77471c3030dc83e;
            _LitLayer_f897f9464d51426ab77471c3030dc83e.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4;
            float3 _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float;
            float _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_6d3c83ac81f44964b0ba3c91db37d17f_Out_0_Texture2D, _Property_6b8283bc94804add84eae007adfe4887_Out_0_Texture2D, _Property_53db522f5756458195c776f8e58c9e03_Out_0_Texture2D, _Property_155f0600a4794498b8698842fb3acb06_Out_0_Vector4, _Property_c6e9c87f1aca400d9b624d94dd871c7a_Out_0_Float, _Property_4ff32fd3347b4e18b1f4c96e6ffc184f_Out_0_Vector2, _Property_448df18c60344a50aa4044f45064eb8e_Out_0_Vector2, _Property_281d8f9a3fe248aea43a1f8615ff6a33_Out_0_Vector2, _Property_3c8fab838a66466b8752bf9ecbe8db99_Out_0_Vector2, _Property_9e2cb7db0fa54761a2cb13aba8255f11_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_f897f9464d51426ab77471c3030dc83e, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float);
            float4 _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_BaseColor_1_Vector4, _LitLayer_f897f9464d51426ab77471c3030dc83e_BaseColor_1_Vector4, _Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4);
            UnityTexture2D _Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_6);
            UnityTexture2D _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_6);
            UnityTexture2D _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_6);
            float4 _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_6) : _Color_Tint_6;
            float _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float = _Normal_Scale_6;
            float2 _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2 = _Metallic_Remapping_6;
            float2 _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2 = _AO_Remapping_6;
            float2 _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2 = _Smoothness_Remapping_6;
            float2 _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2 = _Tiling_6;
            float2 _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2 = _Offset_6;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_1d3814484b5f4ec78dd6ead739661d68;
            _LitLayer_1d3814484b5f4ec78dd6ead739661d68.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4;
            float3 _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float;
            float _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_f46a47ec7f6d43a5ba42e181fb254f04_Out_0_Texture2D, _Property_af9529983b974ee8bc3304802e0e8f33_Out_0_Texture2D, _Property_93b0dca4ca3546f5950a26df4234adff_Out_0_Texture2D, _Property_9cda5a3b4a874031b9bdff2c12a4f9fb_Out_0_Vector4, _Property_bb80cfa6b8be4e9cb60980a1f35dab60_Out_0_Float, _Property_c7562743e08e4bcf89e1b387f2eb0840_Out_0_Vector2, _Property_ce4012ea6f26452cb858bef64bda782a_Out_0_Vector2, _Property_4899e6a2dbec42a4b7ffcf953d63b6c2_Out_0_Vector2, _Property_2b3f3f8052994e589d10824b5757d782_Out_0_Vector2, _Property_7b625f58562b47dc9191940451108e73_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_1d3814484b5f4ec78dd6ead739661d68, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float);
            UnityTexture2D _Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Albedo_7);
            UnityTexture2D _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Normals_7);
            UnityTexture2D _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_Mask_7);
            float4 _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_Color_Tint_7) : _Color_Tint_7;
            float _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float = _Normal_Scale_7;
            float2 _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2 = _Metallic_Remapping_7;
            float2 _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2 = _AO_Remapping_7;
            float2 _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2 = _Smoothness_Remapping_7;
            float2 _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2 = _Tiling_7;
            float2 _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2 = _Offset_7;
            Bindings_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float _LitLayer_5e7d07e7199c46afa246f8f900df65e1;
            _LitLayer_5e7d07e7199c46afa246f8f900df65e1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float4 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4;
            float3 _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float;
            float _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float;
            SG_LitLayer_542d0ce8d03dabf47b7b5fbabbad125a_float(_Property_d6610b64c1624aaea2636949eead4431_Out_0_Texture2D, _Property_7d1f6787bc3f4945a49d64e5869ce621_Out_0_Texture2D, _Property_71ddc524ff3d4049b02f235ab68eb1b3_Out_0_Texture2D, _Property_c10bd9701b4c4cd6bc219f5aabc4be4d_Out_0_Vector4, _Property_d10df53118f54c3bb86b68b047d44ecb_Out_0_Float, _Property_d477d1fe72db47fd8ae0d516de6e7052_Out_0_Vector2, _Property_04c051228f194d5db3278925ab969e8e_Out_0_Vector2, _Property_90e4c91ca8a542bc889c92d640cbe14a_Out_0_Vector2, _Property_082e2a20a02a4af68af5efb68bd482bd_Out_0_Vector2, _Property_aa3f8f3fd1e7430b8be2abfbe6520fb6_Out_0_Vector2, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso2), _LitLayer_5e7d07e7199c46afa246f8f900df65e1, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float);
            float4 _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4;
            Unity_Add_float4(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_BaseColor_1_Vector4, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_BaseColor_1_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4);
            float4 _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4;
            Unity_Add_float4(_Add_eb6727430ba942ddbd3810fce59bfbb0_Out_2_Vector4, _Add_8edb5018aa0046c1b6b72a33998a517b_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4);
            float4 _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4;
            Unity_Add_float4(_Add_19ad849680e14c3496a5ad3e92704885_Out_2_Vector4, _Add_282e5039590645718e93027d99649d6e_Out_2_Vector4, _Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4);
            float _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_R_1_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_G_2_Float, _Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float);
            float _Add_3995f6f6129448b09302fe5492790629_Out_2_Float;
            Unity_Add_float(_Split_d220aea05ef540ebafd1f07e17f75a98_B_3_Float, _Split_d220aea05ef540ebafd1f07e17f75a98_A_4_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float);
            float _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float;
            Unity_Add_float(_Add_f83f7c19dae64c5ebc200d4f4b53c7f8_Out_2_Float, _Add_3995f6f6129448b09302fe5492790629_Out_2_Float, _Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float);
            float _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_R_1_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_G_2_Float, _Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float);
            float _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float;
            Unity_Add_float(_Split_ae415cd91bb24ad891aa00c5a1dd1b68_B_3_Float, _Split_ae415cd91bb24ad891aa00c5a1dd1b68_A_4_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float);
            float _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float;
            Unity_Add_float(_Add_782aa8fab6024c76a7fdaed6c30c06a1_Out_2_Float, _Add_63d9b4a6d4d441fc8d38dca47bde61a8_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float);
            float _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float;
            Unity_Add_float(_Add_33c29fad50004e5e986b2bcd3fc700e9_Out_2_Float, _Add_2396640fb36a450082822dd40fd567c7_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float);
            float4 _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4;
            Unity_Divide_float4(_Add_b7e9f5003966426aa90e313d230b1ed4_Out_2_Vector4, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxxx), _Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4);
            float _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Smoothness_5_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Smoothness_5_Float, _Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float);
            float _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Smoothness_5_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Smoothness_5_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float);
            float _Add_1d7868509d274829a85cfe104008340f_Out_2_Float;
            Unity_Add_float(_Add_f90a1d8edcd94d18a28abb1545d89237_Out_2_Float, _Add_c7bbd984ba934b589e2d3aadf1a0c439_Out_2_Float, _Add_1d7868509d274829a85cfe104008340f_Out_2_Float);
            float _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Smoothness_5_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Smoothness_5_Float, _Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float);
            float _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Smoothness_5_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Smoothness_5_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float);
            float _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float;
            Unity_Add_float(_Add_ed684d8df2e049fcb975ddb226cf6750_Out_2_Float, _Add_3113deee22aa4ef4803f95fece322df9_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float);
            float _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float;
            Unity_Add_float(_Add_1d7868509d274829a85cfe104008340f_Out_2_Float, _Add_d1059790330c4832bfd4f9cd7f3c45e4_Out_2_Float, _Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float);
            float _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            Unity_Divide_float(_Add_125b85c8f5d44af2ba3e2c5e708a0ef3_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float);
            float _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_AO_4_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_AO_4_Float, _Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float);
            float _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_AO_4_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_AO_4_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float);
            float _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float;
            Unity_Add_float(_Add_8d2237a417e24caa94bcdcf81fc6cb75_Out_2_Float, _Add_48a1422cd2ec4e9582b7ad1501b2f8ee_Out_2_Float, _Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float);
            float _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_AO_4_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_AO_4_Float, _Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float);
            float _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_AO_4_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_AO_4_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float);
            float _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float;
            Unity_Add_float(_Add_49db157cf4ec4465b441f5a2f9644251_Out_2_Float, _Add_d1818564c5c04e65a41209e4511db630_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float);
            float _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float;
            Unity_Add_float(_Add_0633f40ea14d44b0b0323d415c01627f_Out_2_Float, _Add_56fd3cbac7bf4a06ba6bc488318fb37d_Out_2_Float, _Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float);
            float _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            Unity_Divide_float(_Add_db2bf90448204c1c9d0d6d453a1d7ea8_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float);
            float3 _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Normals_2_Vector3, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Normals_2_Vector3, _Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3);
            float3 _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Normals_2_Vector3, _LitLayer_5255baca24fd4912bc05918766c7d91e_Normals_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3);
            float3 _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3;
            Unity_Add_float3(_Add_4177ffbdf42749f5a523b127d9ce7b50_Out_2_Vector3, _Add_5b0c5eff86d645bd8aa27c2db65c7580_Out_2_Vector3, _Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3);
            float3 _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Normals_2_Vector3, _LitLayer_f897f9464d51426ab77471c3030dc83e_Normals_2_Vector3, _Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3);
            float3 _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3;
            Unity_Add_float3(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Normals_2_Vector3, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Normals_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3);
            float3 _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3;
            Unity_Add_float3(_Add_4583030e1cb848ffac91c87d0c9fbef1_Out_2_Vector3, _Add_61ff7f67257142f8bac1e5228bb8dbb3_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3);
            float3 _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3;
            Unity_Add_float3(_Add_d84cc1cc74c74628aeb49ba1bdeb434e_Out_2_Vector3, _Add_4e763cece0bb423f8ab00696fdfd7d00_Out_2_Vector3, _Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3);
            float3 _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3;
            Unity_Divide_float3(_Add_30520438e0ff47aaabdc202219bb4698_Out_2_Vector3, (_Add_251feb91791843baaa3638f6fd29f619_Out_2_Float.xxx), _Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3);
            float3 _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            Unity_Normalize_float3(_Divide_bd51be5e4cd3446581fd55cac04ea268_Out_2_Vector3, _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3);
            float _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float;
            Unity_Add_float(_LitLayer_3fdb3e2e3fbc4d758ffab473a1fc5006_Metallic_3_Float, _LitLayer_513ffd3dead74b5ca5456e2100244bdf_Metallic_3_Float, _Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float);
            float _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float;
            Unity_Add_float(_LitLayer_1f2c81a1ccd84db58f59135fdd91517f_Metallic_3_Float, _LitLayer_5255baca24fd4912bc05918766c7d91e_Metallic_3_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float);
            float _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float;
            Unity_Add_float(_Add_c296b9a540c54edb8443cf54ed8c8f9e_Out_2_Float, _Add_fcb132a604774c07ac93a03d6e0f27f0_Out_2_Float, _Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float);
            float _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float;
            Unity_Add_float(_LitLayer_ff97f48270044dceb903e3d916a4bb9b_Metallic_3_Float, _LitLayer_f897f9464d51426ab77471c3030dc83e_Metallic_3_Float, _Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float);
            float _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float;
            Unity_Add_float(_LitLayer_1d3814484b5f4ec78dd6ead739661d68_Metallic_3_Float, _LitLayer_5e7d07e7199c46afa246f8f900df65e1_Metallic_3_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float);
            float _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float;
            Unity_Add_float(_Add_b9b3f147e3d743b69ed64d6ce15afc3a_Out_2_Float, _Add_201eb4f0f9a3438f82f009e3482ee5d8_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float);
            float _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float;
            Unity_Add_float(_Add_eb70b6eac3d94621aa217ee3e30a76ad_Out_2_Float, _Add_40d729985fe9495baee205753b5d9e49_Out_2_Float, _Add_7660ed0f30444cdda982202340cff83d_Out_2_Float);
            float _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            Unity_Divide_float(_Add_7660ed0f30444cdda982202340cff83d_Out_2_Float, _Add_251feb91791843baaa3638f6fd29f619_Out_2_Float, _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float);
            surface.BaseColor = (_Divide_ef3710ad77ae4cf6ba4fc51a7e79807a_Out_2_Vector4.xyz);
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = 1;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Divide_3c39c2058fb0480389620203ea124ae8_Out_2_Float;
            surface.Occlusion = _Divide_4a4b1bb2312b4d2e943402c0c4fb04e8_Out_2_Float;
            surface.NormalTS = _Normalize_077347ed3d504bbaba667e0795f8706c_Out_1_Vector3;
            surface.Metallic = _Divide_34202c8b09ba4ada92aab94e3a0bbf40_Out_2_Float;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
            normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
            fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
                alpha = surfaceDescription.Alpha;
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassPathTracing.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
    }
    CustomEditor "UnityEditor.ShaderGraph.GenericShaderGraphMaterialGUI"
    CustomEditorForRenderPipeline "Rendering.HighDefinition.LitShaderGraphGUI" "UnityEngine.Rendering.HighDefinition.HDRenderPipelineAsset"
    FallBack "Hidden/Shader Graph/FallbackError"
}